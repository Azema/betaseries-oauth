/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Base.ts":
/*!*********************!*\
  !*** ./src/Base.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Base = exports.HTTP_VERBS = exports.EventTypes = exports.MediaType = void 0;\r\n//namespace BS {\r\nconst Cache_1 = __webpack_require__(/*! ./Cache */ \"./src/Cache.ts\");\r\nconst Character_1 = __webpack_require__(/*! ./Character */ \"./src/Character.ts\");\r\nconst Comment_1 = __webpack_require__(/*! ./Comment */ \"./src/Comment.ts\");\r\nconst Note_1 = __webpack_require__(/*! ./Note */ \"./src/Note.ts\");\r\nconst User_1 = __webpack_require__(/*! ./User */ \"./src/User.ts\");\r\nvar MediaType;\r\n(function (MediaType) {\r\n    MediaType[\"show\"] = \"show\";\r\n    MediaType[\"movie\"] = \"movie\";\r\n    MediaType[\"episode\"] = \"episode\";\r\n})(MediaType = exports.MediaType || (exports.MediaType = {}));\r\nvar EventTypes;\r\n(function (EventTypes) {\r\n    EventTypes[EventTypes[\"UPDATE\"] = 0] = \"UPDATE\";\r\n    EventTypes[EventTypes[\"SAVE\"] = 1] = \"SAVE\";\r\n})(EventTypes = exports.EventTypes || (exports.EventTypes = {}));\r\nvar HTTP_VERBS;\r\n(function (HTTP_VERBS) {\r\n    HTTP_VERBS[\"GET\"] = \"GET\";\r\n    HTTP_VERBS[\"POST\"] = \"POST\";\r\n    HTTP_VERBS[\"PUT\"] = \"PUT\";\r\n    HTTP_VERBS[\"DELETE\"] = \"DELETE\";\r\n    HTTP_VERBS[\"OPTIONS\"] = \"OPTIONS\";\r\n})(HTTP_VERBS = exports.HTTP_VERBS || (exports.HTTP_VERBS = {}));\r\nclass Base {\r\n    /*\r\n                    STATIC\r\n    */\r\n    /**\r\n     * Flag de debug pour le dev\r\n     * @type {boolean}\r\n     */\r\n    static debug = false;\r\n    /**\r\n     * L'objet cache du script pour stocker les données\r\n     * @type {CacheUS}\r\n     */\r\n    static cache = null;\r\n    /**\r\n     * Objet contenant les informations de l'API\r\n     * @type {*}\r\n     */\r\n    static api = {\r\n        \"url\": 'https://api.betaseries.com',\r\n        \"versions\": { \"current\": '3.0', \"last\": '3.0' },\r\n        \"resources\": [\r\n            'badges', 'comments', 'episodes', 'friends', 'members', 'messages',\r\n            'movies', 'news', 'oauth', 'pictures', 'planning', 'platforms',\r\n            'polls', 'reports', 'search', 'seasons', 'shows', 'subtitles',\r\n            'timeline'\r\n        ],\r\n        \"check\": {\r\n            \"episodes\": ['display', 'list', 'search'],\r\n            \"movies\": ['list', 'movie', 'search', 'similars'],\r\n            \"search\": ['all', 'movies', 'shows'],\r\n            \"shows\": ['display', 'episodes', 'list', 'search', 'similars']\r\n        }\r\n    };\r\n    /**\r\n     * Le token d'authentification de l'API\r\n     * @type {String}\r\n     */\r\n    static token = null;\r\n    /**\r\n     * La clé d'utilisation de l'API\r\n     * @type {String}\r\n     */\r\n    static userKey = null;\r\n    /**\r\n     * L'identifiant du membre connecté\r\n     * @type {Number}\r\n     */\r\n    static userId = null;\r\n    /**\r\n     * Clé pour l'API TheMovieDB\r\n     * @type {string}\r\n     */\r\n    static themoviedb_api_user_key = null;\r\n    /**\r\n     * Le nombre d'appels à l'API\r\n     * @type {Number}\r\n     */\r\n    static counter = 0;\r\n    /**\r\n     * L'URL de base du serveur contenant les ressources statiques\r\n     * @type {String}\r\n     */\r\n    static serverBaseUrl = '';\r\n    /**\r\n     * Fonction de notification sur la page Web\r\n     * @type {Function}\r\n     */\r\n    static notification = function () { };\r\n    /**\r\n     * Fonction pour vérifier que le membre est connecté\r\n     * @type {Function}\r\n     */\r\n    static userIdentified = function () { };\r\n    /**\r\n     * Fonction vide\r\n     * @type {Function}\r\n     */\r\n    static noop = function () { };\r\n    /**\r\n     * Fonction de traduction de chaînes de caractères\r\n     * @param   {String}  msg     Identifiant de la chaîne à traduire\r\n     * @param   {*[]}     args    Autres paramètres\r\n     * @returns {string}\r\n     */\r\n    static trans = function (msg, ...args) { };\r\n    /**\r\n     * Contient les infos sur les différentes classification TV et cinéma\r\n     * @type {Ratings}\r\n     */\r\n    static ratings = null;\r\n    /**\r\n     * Types d'évenements gérés par cette classe\r\n     * @type {Array}\r\n     */\r\n    static EventTypes = new Array(EventTypes.UPDATE, EventTypes.SAVE);\r\n    /**\r\n     * Fonction d'authentification sur l'API BetaSeries\r\n     *\r\n     * @return {Promise}\r\n     */\r\n    static authenticate() {\r\n        if (Base.debug)\r\n            console.log('authenticate');\r\n        if (jQuery('#containerIframe').length <= 0) {\r\n            jQuery('body').append(`\r\n                    <div id=\"containerIframe\">\r\n                    <iframe id=\"userscript\"\r\n                            name=\"userscript\"\r\n                            title=\"Connexion à BetaSeries\"\r\n                            width=\"50%\"\r\n                            height=\"400\"\r\n                            src=\"${Base.serverBaseUrl}/index.html\"\r\n                            style=\"background:white;margin:auto;\">\r\n                    </iframe>\r\n                    </div>'\r\n                `);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            function receiveMessage(event) {\r\n                const origin = new URL(Base.serverBaseUrl).origin;\r\n                // if (debug) console.log('receiveMessage', event);\r\n                if (event.origin !== origin) {\r\n                    if (Base.debug)\r\n                        console.error('receiveMessage {origin: %s}', event.origin, event);\r\n                    reject(`event.origin is not ${origin}`);\r\n                    return;\r\n                }\r\n                if (event.data.message === 'access_token') {\r\n                    Base.token = event.data.value;\r\n                    $('#containerIframe').remove();\r\n                    resolve(event.data.message);\r\n                    window.removeEventListener(\"message\", receiveMessage, false);\r\n                }\r\n                else {\r\n                    console.error('Erreur de récuperation du token', event);\r\n                    reject(event.data);\r\n                    Base.notification('Erreur de récupération du token', 'Pas de message');\r\n                    window.removeEventListener(\"message\", receiveMessage, false);\r\n                }\r\n            }\r\n            window.addEventListener(\"message\", receiveMessage, false);\r\n        });\r\n    }\r\n    /**\r\n     * Fonction servant à appeler l'API de BetaSeries\r\n     *\r\n     * @param  {String}   type              Type de methode d'appel Ajax (GET, POST, PUT, DELETE)\r\n     * @param  {String}   resource          La ressource de l'API (ex: shows, seasons, episodes...)\r\n     * @param  {String}   action            L'action à appliquer sur la ressource (ex: search, list...)\r\n     * @param  {*}        args              Un objet (clef, valeur) à transmettre dans la requête\r\n     * @param  {bool}     [force=false]     Indique si on doit utiliser le cache ou non (Par défaut: false)\r\n     * @return {Promise}\r\n     */\r\n    static callApi(type, resource, action, args, force = false) {\r\n        if (Base.api && Base.api.resources.indexOf(resource) === -1) {\r\n            throw new Error(`Ressource (${resource}) inconnue dans l'API.`);\r\n        }\r\n        if (!Base.token || !Base.userKey) {\r\n            throw new Error('Token and userKey are required');\r\n        }\r\n        let check = false, \r\n        // Les en-têtes pour l'API\r\n        myHeaders = {\r\n            'Accept': 'application/json',\r\n            'X-BetaSeries-Version': Base.api.versions.current,\r\n            'X-BetaSeries-Token': Base.token,\r\n            'X-BetaSeries-Key': Base.userKey\r\n        }, checkKeys = Object.keys(Base.api.check);\r\n        if (Base.debug) {\r\n            console.log('Base.callApi', {\r\n                type: type,\r\n                resource: resource,\r\n                action: action,\r\n                args: args,\r\n                force: force\r\n            });\r\n        }\r\n        // On retourne la ressource en cache si elle y est présente\r\n        if (Base.cache && !force && type === 'GET' && args && 'id' in args &&\r\n            Base.cache.has(resource, args.id)) {\r\n            //if (debug) console.log('Base.callApi retourne la ressource du cache (%s: %d)', resource, args.id);\r\n            return new Promise((resolve) => {\r\n                resolve(Base.cache.get(resource, args.id));\r\n            });\r\n        }\r\n        // On check si on doit vérifier la validité du token\r\n        // (https://www.betaseries.com/bugs/api/461)\r\n        if (Base.userIdentified() && checkKeys.indexOf(resource) !== -1 &&\r\n            Base.api.check[resource].indexOf(action) !== -1) {\r\n            check = true;\r\n        }\r\n        function fetchUri(resolve, reject) {\r\n            let initFetch = {\r\n                method: type,\r\n                headers: myHeaders,\r\n                mode: 'cors',\r\n                cache: 'no-cache'\r\n            };\r\n            let uri = `${Base.api.url}/${resource}/${action}`;\r\n            const keys = Object.keys(args);\r\n            // On crée l'URL de la requête de type GET avec les paramètres\r\n            if (type === 'GET' && keys.length > 0) {\r\n                let params = [];\r\n                for (let key of keys) {\r\n                    params.push(key + '=' + encodeURIComponent(args[key]));\r\n                }\r\n                uri += '?' + params.join('&');\r\n            }\r\n            else if (keys.length > 0) {\r\n                initFetch.body = new URLSearchParams(args);\r\n            }\r\n            fetch(uri, initFetch).then(response => {\r\n                Base.counter++; // Incrément du compteur de requêtes à l'API\r\n                if (Base.debug)\r\n                    console.log('fetch (%s %s) response status: %d', type, uri, response.status);\r\n                // On récupère les données et les transforme en objet\r\n                response.json().then((data) => {\r\n                    if (Base.debug)\r\n                        console.log('fetch (%s %s) data', type, uri, data);\r\n                    // On gère le retour d'erreurs de l'API\r\n                    if (data.errors !== undefined && data.errors.length > 0) {\r\n                        const code = data.errors[0].code, text = data.errors[0].text;\r\n                        if (code === 2005 ||\r\n                            (response.status === 400 && code === 0 &&\r\n                                text === \"L'utilisateur a déjà marqué cet épisode comme vu.\")) {\r\n                            reject('changeStatus');\r\n                        }\r\n                        else if (code == 2001) {\r\n                            // Appel de l'authentification pour obtenir un token valide\r\n                            Base.authenticate().then(() => {\r\n                                Base.callApi(type, resource, action, args, force)\r\n                                    .then(data => resolve(data), err => reject(err));\r\n                            }, (err) => {\r\n                                reject(err);\r\n                            });\r\n                        }\r\n                        else {\r\n                            reject(data.errors[0]);\r\n                        }\r\n                        return;\r\n                    }\r\n                    // On gère les erreurs réseau\r\n                    if (!response.ok) {\r\n                        console.error('Fetch erreur network', response);\r\n                        reject(response);\r\n                        return;\r\n                    }\r\n                    resolve(data);\r\n                });\r\n            }).catch(error => {\r\n                if (Base.debug)\r\n                    console.log('Il y a eu un problème avec l\\'opération fetch: ' + error.message);\r\n                console.error(error);\r\n                reject(error.message);\r\n            });\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            if (check) {\r\n                let paramsFetch = {\r\n                    method: 'GET',\r\n                    headers: myHeaders,\r\n                    mode: 'cors',\r\n                    cache: 'no-cache'\r\n                };\r\n                if (Base.debug)\r\n                    console.info('%ccall /members/is_active', 'color:blue');\r\n                fetch(`${Base.api.url}/members/is_active`, paramsFetch).then(resp => {\r\n                    Base.counter++; // Incrément du compteur de requêtes à l'API\r\n                    if (!resp.ok) {\r\n                        // Appel de l'authentification pour obtenir un token valide\r\n                        Base.authenticate().then(() => {\r\n                            // On met à jour le token pour le prochain appel à l'API\r\n                            myHeaders['X-BetaSeries-Token'] = Base.token;\r\n                            fetchUri(resolve, reject);\r\n                        }).catch(err => reject(err));\r\n                        return;\r\n                    }\r\n                    fetchUri(resolve, reject);\r\n                }).catch(error => {\r\n                    if (Base.debug)\r\n                        console.log('Il y a eu un problème avec l\\'opération fetch: ' + error.message);\r\n                    console.error(error);\r\n                    reject(error.message);\r\n                });\r\n            }\r\n            else {\r\n                fetchUri(resolve, reject);\r\n            }\r\n        });\r\n    }\r\n    /*\r\n                    PROPERTIES\r\n    */\r\n    description;\r\n    characters;\r\n    comments;\r\n    id;\r\n    objNote;\r\n    resource_url;\r\n    title;\r\n    user;\r\n    mediaType;\r\n    _elt;\r\n    _listeners;\r\n    /*\r\n                    METHODS\r\n    */\r\n    constructor(data) {\r\n        if (!(data instanceof Object)) {\r\n            throw new Error(\"data is not an object\");\r\n        }\r\n        this._initListeners()\r\n            .fill(data);\r\n        return this;\r\n    }\r\n    /**\r\n     * Remplit l'objet avec les données fournit en paramètre\r\n     * @param  {Obj} data Les données provenant de l'API\r\n     * @returns this\r\n     */\r\n    fill(data) {\r\n        this.id = parseInt(data.id, 10);\r\n        this.characters = [];\r\n        if (data.characters && data.characters instanceof Array) {\r\n            for (let c = 0; c < data.characters.length; c++) {\r\n                this.characters.push(new Character_1.Character(data.characters[c]));\r\n            }\r\n        }\r\n        this.comments = [];\r\n        if (data.comments && data.comments instanceof Array) {\r\n            for (let c = 0; c < data.comments.length; c++) {\r\n                this.comments.push(new Comment_1.CommentBS(data.comments[c]));\r\n            }\r\n        }\r\n        this.objNote = (data.note) ? new Note_1.Note(data.note) : new Note_1.Note(data.notes);\r\n        this.resource_url = data.resource_url;\r\n        this.title = data.title;\r\n        this.user = new User_1.User(data.user);\r\n        this.description = data.description;\r\n        this.save();\r\n        return this;\r\n    }\r\n    /**\r\n     * Initialize le tableau des écouteurs d'évènements\r\n     * @returns this\r\n     */\r\n    _initListeners() {\r\n        this._listeners = {};\r\n        for (let e = 0; e < Base.EventTypes.length; e++) {\r\n            this._listeners[Base.EventTypes[e]] = new Array();\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Permet d'ajouter un listener sur un type d'évenement\r\n     * @param  {string}   name Le type d'évenement\r\n     * @param  {Function} fn   La fonction à appeler\r\n     * @return {this}          L'instance du média\r\n     */\r\n    addListener(name, fn) {\r\n        // On vérifie que le type d'event est pris en charge\r\n        if (Base.EventTypes.indexOf(name) < 0) {\r\n            throw new Error(`${name} ne fait pas partit des events gérés par cette classe`);\r\n        }\r\n        if (this._listeners[name] === undefined) {\r\n            this._listeners[name] = new Array();\r\n        }\r\n        this._listeners[name].push(fn);\r\n        return this;\r\n    }\r\n    /**\r\n     * Permet de supprimer un listener sur un type d'évenement\r\n     * @param  {string}   name Le type d'évenement\r\n     * @param  {Function} fn   La fonction qui était appelée\r\n     * @return {Base}          L'instance du média\r\n     */\r\n    removeListener(name, fn) {\r\n        if (this._listeners[name] !== undefined) {\r\n            for (let l = 0; l < this._listeners[name].length; l++) {\r\n                if (this._listeners[name][l] === fn)\r\n                    this._listeners[name].splice(l, 1);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Appel les listeners pour un type d'évenement\r\n     * @param  {string} name Le type d'évenement\r\n     * @return {Show}        L'instance Show\r\n     */\r\n    _callListeners(name) {\r\n        if (this._listeners[name] !== undefined) {\r\n            for (let l = 0; l < this._listeners[name].length; l++) {\r\n                this._listeners[name][l].call(this, this);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Sauvegarde l'objet en cache\r\n     * @return this\r\n     */\r\n    save() {\r\n        if (Base.cache instanceof Cache_1.CacheUS) {\r\n            Base.cache.set(this.mediaType.plural, this.id, this);\r\n            this._callListeners(EventTypes.SAVE);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Retourne le DOMElement correspondant au média\r\n     * @returns {JQuery} Le DOMElement jQuery\r\n     */\r\n    get elt() {\r\n        return this._elt;\r\n    }\r\n    /**\r\n     * Définit le DOMElement de référence pour ce média\r\n     * @param  {JQuery} elt DOMElement auquel est rattaché le média\r\n     */\r\n    set elt(elt) {\r\n        this._elt = elt;\r\n    }\r\n    /**\r\n     * Retourne le nombre d'acteurs référencés dans ce média\r\n     * @returns {number}\r\n     */\r\n    get nbCharacters() {\r\n        return this.characters.length;\r\n    }\r\n    /**\r\n     * Retourne le nombre de commentaires pour ce média\r\n     * @returns number\r\n     */\r\n    get nbComments() {\r\n        return this.comments.length;\r\n    }\r\n    /**\r\n     * Décode le titre de la page\r\n     * @return {Base} This\r\n     */\r\n    decodeTitle() {\r\n        let $elt = this.elt.find('.blockInformations__title'), title = $elt.text();\r\n        if (/&#/.test(title)) {\r\n            $elt.text($('<textarea />').html(title).text());\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Ajoute le nombre de votes à la note dans l'attribut title de la balise\r\n     * contenant la représentation de la note de la ressource\r\n     *\r\n     * @param  {Boolean} change  Indique si on doit changer l'attribut title du DOMElement\r\n     * @return {String}         Le titre modifié de la note\r\n     */\r\n    changeTitleNote(change = true) {\r\n        const $elt = this.elt.find('.js-render-stars');\r\n        if (this.objNote.mean <= 0 || this.objNote.total <= 0) {\r\n            if (change)\r\n                $elt.attr('title', 'Aucun vote');\r\n            return;\r\n        }\r\n        const votes = 'vote' + (this.objNote.total > 1 ? 's' : ''), \r\n        // On met en forme le nombre de votes\r\n        total = new Intl.NumberFormat('fr-FR', { style: 'decimal', useGrouping: true })\r\n            .format(this.objNote.total), \r\n        // On limite le nombre de chiffre après la virgule\r\n        note = this.objNote.mean.toFixed(1);\r\n        let title = `${total} ${votes} : ${note} / 5`;\r\n        // On ajoute la note du membre connecté, si il a voté\r\n        if (Base.userIdentified() && this.objNote.user > 0) {\r\n            title += `, votre note: ${this.objNote.user}`;\r\n        }\r\n        if (change) {\r\n            $elt.attr('title', title);\r\n        }\r\n        return title;\r\n    }\r\n    /**\r\n     * Ajoute le nombre de votes à la note de la ressource\r\n     * @return {Base}\r\n     */\r\n    addNumberVoters() {\r\n        const _this = this;\r\n        const votes = $('.stars.js-render-stars'); // ElementHTML ayant pour attribut le titre avec la note de la série\r\n        if (Base.debug)\r\n            console.log('addNumberVoters');\r\n        // if (debug) console.log('addNumberVoters Media.callApi', data);\r\n        const title = this.changeTitleNote(true);\r\n        // On ajoute un observer sur l'attribut title de la note, en cas de changement lors d'un vote\r\n        new MutationObserver((mutationsList) => {\r\n            const changeTitleMutation = () => {\r\n                // On met à jour le nombre de votants, ainsi que la note du membre connecté\r\n                const upTitle = _this.changeTitleNote(false);\r\n                // On évite une boucle infinie\r\n                if (upTitle !== title) {\r\n                    votes.attr('title', upTitle);\r\n                }\r\n            };\r\n            let mutation;\r\n            for (mutation of mutationsList) {\r\n                // On vérifie si le titre a été modifié\r\n                // @TODO: A tester\r\n                if (!/vote/.test(mutation.target.nodeValue)) {\r\n                    changeTitleMutation();\r\n                }\r\n            }\r\n        }).observe(votes.get(0), {\r\n            attributes: true,\r\n            childList: false,\r\n            characterData: false,\r\n            subtree: false,\r\n            attributeFilter: ['title']\r\n        });\r\n        return this;\r\n    }\r\n}\r\nexports.Base = Base;\r\n//}\r\n\n\n//# sourceURL=webpack:///./src/Base.ts?");

/***/ }),

/***/ "./src/Cache.ts":
/*!**********************!*\
  !*** ./src/Cache.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CacheUS = exports.DataTypesCache = void 0;\r\nvar DataTypesCache;\r\n(function (DataTypesCache) {\r\n    DataTypesCache[\"shows\"] = \"shows\";\r\n    DataTypesCache[\"episodes\"] = \"episodes\";\r\n    DataTypesCache[\"movies\"] = \"movies\";\r\n    DataTypesCache[\"members\"] = \"members\";\r\n})(DataTypesCache = exports.DataTypesCache || (exports.DataTypesCache = {}));\r\n/**\r\n * @class Gestion du Cache pour le script\r\n */\r\nclass CacheUS {\r\n    _data;\r\n    constructor() {\r\n        return this._init();\r\n    }\r\n    /**\r\n     * Initialize le cache pour chaque type\r\n     * @returns this\r\n     */\r\n    _init() {\r\n        this._data[DataTypesCache.shows] = {};\r\n        this._data[DataTypesCache.episodes] = {};\r\n        this._data[DataTypesCache.movies] = {};\r\n        this._data[DataTypesCache.members] = {};\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns an Array of all currently set keys.\r\n     * @returns {Array} cache keys\r\n     */\r\n    keys(type = null) {\r\n        if (!type)\r\n            return Object.keys(this._data);\r\n        return Object.keys(this._data[type]);\r\n    }\r\n    /**\r\n     * Checks if a key is currently set in the cache.\r\n     * @param {DataTypesCache}  type Le type de ressource\r\n     * @param {String|number}   key  the key to look for\r\n     * @returns {boolean} true if set, false otherwise\r\n     */\r\n    has(type, key) {\r\n        return (this._data[type] !== undefined && this._data[type][key] !== undefined);\r\n    }\r\n    /**\r\n     * Clears all cache entries.\r\n     * @param   {DataTypesCache} [type=null] Le type de ressource à nettoyer\r\n     * @returns this\r\n     */\r\n    clear(type = null) {\r\n        // On nettoie juste un type de ressource\r\n        if (type && this._data[type] !== undefined) {\r\n            for (let key in this._data[type]) {\r\n                delete this._data[type][key];\r\n            }\r\n        }\r\n        // On nettoie l'ensemble du cache\r\n        else {\r\n            this._init();\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Gets the cache entry for the given key.\r\n     * @param {DataTypesCache}  type Le type de ressource\r\n     * @param {String|number}   key  the cache key\r\n     * @returns {*} the cache entry if set, or undefined otherwise\r\n     */\r\n    get(type, key) {\r\n        if (this.has(type, key)) {\r\n            return this._data[type][key];\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the cache entry if set, or a default value otherwise.\r\n     * @param {DataTypesCache}  type Le type de ressource\r\n     * @param {String|number}   key  the key to retrieve\r\n     * @param {*}               def  the default value to return if unset\r\n     * @returns {*} the cache entry if set, or the default value provided.\r\n     */\r\n    getOrDefault(type, key, def) {\r\n        return this.has(type, key) ? this.get(type, key) : def;\r\n    }\r\n    /**\r\n     * Sets a cache entry with the provided key and value.\r\n     * @param {DataTypesCache}  type  Le type de ressource\r\n     * @param {String|number}   key   the key to set\r\n     * @param {*}               value the value to set\r\n     * @returns this\r\n     */\r\n    set(type, key, value) {\r\n        if (this._data[type] !== undefined) {\r\n            this._data[type][key] = value;\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes the cache entry for the given key.\r\n     * @param {DataTypesCache}  type  Le type de ressource\r\n     * @param {String|number}   key the key to remove\r\n     * @returns this\r\n     */\r\n    remove(type, key) {\r\n        if (this.has(type, key)) {\r\n            delete this._data[type][key];\r\n        }\r\n        return this;\r\n    }\r\n}\r\nexports.CacheUS = CacheUS;\r\n//}\r\n\n\n//# sourceURL=webpack:///./src/Cache.ts?");

/***/ }),

/***/ "./src/Character.ts":
/*!**************************!*\
  !*** ./src/Character.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Character = void 0;\r\n// namespace BS {\r\nclass Character {\r\n    constructor(data) {\r\n        this.actor = data.actor;\r\n        this.picture = data.picture;\r\n        this.name = data.name;\r\n        this.guest = data.guest;\r\n        this.id = parseInt(data.id, 10);\r\n        this.description = data.description;\r\n        this.role = data.role;\r\n        this.show_id = parseInt(data.show_id, 10);\r\n        this.movie_id = parseInt(data.movie_id, 10);\r\n    }\r\n    actor;\r\n    description;\r\n    guest;\r\n    id;\r\n    name;\r\n    picture;\r\n    role;\r\n    show_id;\r\n    movie_id;\r\n}\r\nexports.Character = Character;\r\n// }\r\n\n\n//# sourceURL=webpack:///./src/Character.ts?");

/***/ }),

/***/ "./src/Comment.ts":
/*!************************!*\
  !*** ./src/Comment.ts ***!
  \************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CommentBS = void 0;\r\n// namespace BS {\r\nclass CommentBS {\r\n    constructor(data) {\r\n        this.id = parseInt(data.id, 10);\r\n        this.reference = data.reference;\r\n        this.type = data.type;\r\n        this.ref_id = parseInt(data.ref_id, 10);\r\n        this.user_id = parseInt(data.user_id, 10);\r\n        this.login = data.login;\r\n        this.avatar = data.avatar;\r\n        this.date = new Date(data.date);\r\n        this.text = data.text;\r\n        this.inner_id = parseInt(data.inner_id, 10);\r\n        this.in_reply_to = parseInt(data.in_reply_to, 10);\r\n        this.user_note = parseInt(data.user_note, 10);\r\n    }\r\n    id;\r\n    reference;\r\n    type;\r\n    ref_id;\r\n    user_id;\r\n    login;\r\n    avatar;\r\n    date;\r\n    text;\r\n    inner_id;\r\n    in_reply_to;\r\n    user_note;\r\n}\r\nexports.CommentBS = CommentBS;\r\n// }\r\n\n\n//# sourceURL=webpack:///./src/Comment.ts?");

/***/ }),

/***/ "./src/Episode.ts":
/*!************************!*\
  !*** ./src/Episode.ts ***!
  \************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Episode = exports.Season = void 0;\r\n// namespace BS {\r\nconst Base_1 = __webpack_require__(/*! ./Base */ \"./src/Base.ts\");\r\nconst Cache_1 = __webpack_require__(/*! ./Cache */ \"./src/Cache.ts\");\r\nconst Show_1 = __webpack_require__(/*! ./Show */ \"./src/Show.ts\");\r\nconst Subtitle_1 = __webpack_require__(/*! ./Subtitle */ \"./src/Subtitle.ts\");\r\nclass Season {\r\n    number;\r\n    episodes;\r\n    _show;\r\n    constructor(data, show) {\r\n        this.number = parseInt(data.number, 10);\r\n        this._show = show;\r\n        if (data.episodes && data.episodes instanceof Array && data.episodes[0] instanceof Episode) {\r\n            this.episodes = data.episodes;\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Récupère les épisodes de la saison sur l'API\r\n     * @returns {Promise<Season>}\r\n     */\r\n    fetchEpisodes() {\r\n        if (!this.number || this.number <= 0) {\r\n            throw new Error('season number incorrect');\r\n        }\r\n        const _this = this;\r\n        return new Promise((resolve, reject) => {\r\n            Base_1.Base.callApi('GET', 'shows', 'episodes', { id: _this._show.id, season: _this.number }, true)\r\n                .then(data => {\r\n                _this.episodes = [];\r\n                for (let e = 0; e < data.episodes.length; e++) {\r\n                    _this.episodes.push(new Episode(data.episodes[e], _this._show));\r\n                }\r\n                resolve(_this);\r\n            }, err => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Retourne l'épisode correspondant à l'identifiant fournit\r\n     * @param  {number} id\r\n     * @returns {Episode}\r\n     */\r\n    getEpisode(id) {\r\n        for (let e = 0; e < this.episodes.length; e++) {\r\n            if (this.episodes[e].id === id) {\r\n                return this.episodes[e];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\nexports.Season = Season;\r\nclass Episode extends Base_1.Base {\r\n    code;\r\n    date;\r\n    episode;\r\n    global;\r\n    season;\r\n    platform_links;\r\n    seen_total;\r\n    show;\r\n    special;\r\n    subtitles;\r\n    thetvdb_id;\r\n    youtube_id;\r\n    constructor(data, show) {\r\n        super(data);\r\n        this.show = show;\r\n        return this.fill(data);\r\n    }\r\n    /**\r\n     * Remplit l'objet avec les données fournit en paramètre\r\n     * @param  {any} data Les données provenant de l'API\r\n     * @returns {Episode}\r\n     */\r\n    fill(data) {\r\n        this.code = data.code;\r\n        this.date = new Date(data.date);\r\n        this.episode = parseInt(data.episode, 10);\r\n        this.global = parseInt(data.global, 10);\r\n        this.season = parseInt(data.season, 10);\r\n        this.platform_links = data.platform_links;\r\n        this.seen_total = parseInt(data.seen_total, 10);\r\n        this.special = data.special === 1 ? true : false;\r\n        this.subtitles = new Array();\r\n        for (let s = 0; s < data.subtitles.length; s++) {\r\n            this.subtitles.push(new Subtitle_1.Subtitle(data.subtitles[s]));\r\n        }\r\n        this.thetvdb_id = parseInt(data.thetvdb_id, 10);\r\n        this.youtube_id = data.youtube_id;\r\n        this.mediaType = { singular: Base_1.MediaType.episode, plural: 'episodes', className: Episode };\r\n        super.fill(data);\r\n        return this;\r\n    }\r\n    /**\r\n     * Ajoute le titre de l'épisode à l'attribut Title\r\n     * du DOMElement correspondant au titre de l'épisode\r\n     * sur la page Web\r\n     *\r\n     * @return {Episode} L'épisode\r\n     */\r\n    addAttrTitle() {\r\n        // Ajout de l'attribut title pour obtenir le nom complet de l'épisode, lorsqu'il est tronqué\r\n        if (this.elt)\r\n            this.elt.find('.slide__title').attr('title', this.title);\r\n        return this;\r\n    }\r\n    /**\r\n     * Met à jour le DOMElement .checkSeen avec les\r\n     * données de l'épisode (id, pos, special)\r\n     * @param  {number} pos  La position de l'épisode dans la liste\r\n     * @return {Episode}\r\n     */\r\n    initCheckSeen(pos) {\r\n        const $checkbox = this.elt.find('.checkSeen');\r\n        if ($checkbox.length > 0 && this.user.seen) {\r\n            // On ajoute l'attribut ID et la classe 'seen' à la case 'checkSeen' de l'épisode déjà vu\r\n            $checkbox.attr('id', 'episode-' + this.id);\r\n            $checkbox.attr('data-id', this.id);\r\n            $checkbox.attr('data-pos', pos);\r\n            $checkbox.attr('data-special', this.special ? '1' : '0');\r\n            $checkbox.attr('title', Base_1.Base.trans(\"member_shows.remove\"));\r\n            $checkbox.addClass('seen');\r\n        }\r\n        else if ($checkbox.length <= 0 && !this.user.seen && !this.user.hidden) {\r\n            // On ajoute la case à cocher pour permettre d'indiquer l'épisode comme vu\r\n            this.elt.find('.slide__image')\r\n                .append(`<div id=\"episode-${this.id}\"\r\n                                  class=\"checkSeen\"\r\n                                  data-id=\"${this.id}\"\r\n                                  data-pos=\"${pos}\"\r\n                                  data-special=\"${this.special}\"\r\n                                  style=\"background: rgba(13,21,28,.2);\"\r\n                                  title=\"${Base_1.Base.trans(\"member_shows.markas\")}\"></div>`);\r\n            this.elt.find('.slide__image img.js-lazy-image').attr('style', 'filter: blur(5px);');\r\n        }\r\n        else if ($checkbox.length > 0 && this.user.hidden) {\r\n            $checkbox.remove();\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Met à jour les infos de la vignette et appelle la fonction d'update du rendu\r\n     * @param  {number} pos La position de l'épisode dans la liste\r\n     * @return {boolean}    Indique si il y a eu un changement\r\n     */\r\n    updateCheckSeen(pos) {\r\n        const $checkSeen = this.elt.find('.checkSeen');\r\n        let changed = false;\r\n        if ($checkSeen.length > 0 && $checkSeen.attr('id') === undefined) {\r\n            if (Base_1.Base.debug)\r\n                console.log('ajout de l\\'attribut ID à l\\'élément \"checkSeen\"');\r\n            // On ajoute l'attribut ID\r\n            $checkSeen.attr('id', 'episode-' + this.id);\r\n            $checkSeen.data('id', this.id);\r\n            $checkSeen.data('pos', pos);\r\n        }\r\n        // if (Base.debug) console.log('updateCheckSeen', {seen: this.user.seen, elt: this.elt, checkSeen: $checkSeen.length, classSeen: $checkSeen.hasClass('seen'), pos: pos, Episode: this});\r\n        // Si le membre a vu l'épisode et qu'il n'est pas indiqué, on change le statut\r\n        if (this.user.seen && $checkSeen.length > 0 && !$checkSeen.hasClass('seen')) {\r\n            if (Base_1.Base.debug)\r\n                console.log('Changement du statut (seen) de l\\'épisode %s', this.code);\r\n            this.updateRender('seen', false);\r\n            changed = true;\r\n        }\r\n        // Si le membre n'a pas vu l'épisode et qu'il n'est pas indiqué, on change le statut\r\n        else if (!this.user.seen && $checkSeen.length > 0 && $checkSeen.hasClass('seen')) {\r\n            if (Base_1.Base.debug)\r\n                console.log('Changement du statut (notSeen) de l\\'épisode %s', this.code);\r\n            this.updateRender('notSeen', false);\r\n            changed = true;\r\n        }\r\n        else if (this.user.hidden && $checkSeen.length > 0) {\r\n            $checkSeen.remove();\r\n            changed = true;\r\n        }\r\n        return changed;\r\n    }\r\n    /**\r\n     * Retourne le code HTML du titre de la popup\r\n     * pour l'affichage de la description\r\n     * @return {string}\r\n     */\r\n    getTitlePopup() {\r\n        return `<span style=\"color: var(--link_color);\">Synopsis épisode ${this.code}</span>`;\r\n    }\r\n    /**\r\n     * Modifie le statut d'un épisode sur l'API\r\n     * @param  {String} status    Le nouveau statut de l'épisode\r\n     * @param  {String} method    Verbe HTTP utilisé pour la requête à l'API\r\n     * @return {void}\r\n     */\r\n    updateStatus(status, method) {\r\n        const _this = this;\r\n        const pos = this.elt.find('.checkSeen').data('pos');\r\n        let promise = new Promise(resolve => { resolve(false); });\r\n        let args = { id: this.id, bulk: true };\r\n        if (method === Base_1.HTTP_VERBS.POST) {\r\n            let createPromise = () => {\r\n                return new Promise(resolve => {\r\n                    new PopupAlert({\r\n                        title: 'Episodes vus',\r\n                        text: 'Doit-on cocher les épisodes précédents comme vu ?',\r\n                        callback_yes: () => {\r\n                            resolve(true);\r\n                        },\r\n                        callback_no: () => {\r\n                            resolve(false);\r\n                        }\r\n                    });\r\n                });\r\n            };\r\n            const $vignettes = jQuery('#episodes .checkSeen');\r\n            // On verifie si les épisodes précédents ont bien été indiqués comme vu\r\n            for (let v = 0; v < pos; v++) {\r\n                if (!$($vignettes.get(v)).hasClass('seen')) {\r\n                    promise = createPromise();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        promise.then(response => {\r\n            if (method === Base_1.HTTP_VERBS.POST && !response) {\r\n                args.bulk = false; // Flag pour ne pas mettre les épisodes précédents comme vus automatiquement\r\n            }\r\n            Base_1.Base.callApi(method, 'episodes', 'watched', args).then(data => {\r\n                if (Base_1.Base.debug)\r\n                    console.log('updateStatus %s episodes/watched', method, data);\r\n                if (!(_this.show instanceof Show_1.Show) && Base_1.Base.cache.has(Cache_1.DataTypesCache.shows, data.show.id)) {\r\n                    _this.show = Base_1.Base.cache.get(Cache_1.DataTypesCache.shows, data.show.id);\r\n                }\r\n                // Si un épisode est vu et que la série n'a pas été ajoutée\r\n                // au compte du membre connecté\r\n                if (!_this.show.in_account && data.episode.show.in_account) {\r\n                    _this.show.in_account = true;\r\n                    _this.show\r\n                        .save()\r\n                        .addShowClick(true);\r\n                }\r\n                // On met à jour l'objet Episode\r\n                if (method === Base_1.HTTP_VERBS.POST && response && pos) {\r\n                    const $vignettes = jQuery('#episodes .slide_flex');\r\n                    let episode = null;\r\n                    for (let e = 0; e < pos; e++) {\r\n                        episode = _this.show.currentSeason.episodes[e];\r\n                        if (episode.elt === null) {\r\n                            episode.elt = jQuery($vignettes.get(e));\r\n                        }\r\n                        if (!episode.user.seen) {\r\n                            episode.user.seen = true;\r\n                            episode\r\n                                .updateRender('seen', false)\r\n                                .save();\r\n                        }\r\n                    }\r\n                }\r\n                _this\r\n                    .fill(data.episode)\r\n                    .updateRender(status, true)\r\n                    .save()\r\n                    ._callListeners(Base_1.EventTypes.UPDATE);\r\n            })\r\n                .catch(err => {\r\n                if (Base_1.Base.debug)\r\n                    console.error('updateStatus error %s', err);\r\n                if (err && err == 'changeStatus') {\r\n                    if (Base_1.Base.debug)\r\n                        console.log('updateStatus error %s changeStatus', method);\r\n                    _this.updateRender(status);\r\n                }\r\n                else {\r\n                    _this.toggleSpinner(false);\r\n                    Base_1.Base.notification('Erreur de modification d\\'un épisode', 'updateStatus: ' + err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Change le statut visuel de la vignette sur le site\r\n     * @param  {String} newStatus     Le nouveau statut de l'épisode\r\n     * @param  {bool}   [update=true] Mise à jour de la ressource en cache et des éléments d'affichage\r\n     * @return {Episode}\r\n     */\r\n    updateRender(newStatus, update = true) {\r\n        const _this = this;\r\n        const $elt = this.elt.find('.checkSeen');\r\n        const lenEpisodes = jQuery('#episodes .checkSeen').length;\r\n        const lenNotSpecial = jQuery('#episodes .checkSeen[data-special=\"0\"]').length;\r\n        if (Base_1.Base.debug)\r\n            console.log('changeStatus', { elt: $elt, status: newStatus, update: update });\r\n        if (newStatus === 'seen') {\r\n            $elt.css('background', ''); // On ajoute le check dans la case à cocher\r\n            $elt.addClass('seen'); // On ajoute la classe 'seen'\r\n            $elt.attr('title', Base_1.Base.trans(\"member_shows.remove\"));\r\n            // On supprime le voile masquant sur la vignette pour voir l'image de l'épisode\r\n            $elt.parent('div.slide__image').find('img').removeAttr('style');\r\n            $elt.parents('div.slide_flex').removeClass('slide--notSeen');\r\n            const moveSeason = function () {\r\n                const slideCurrent = jQuery('#seasons div.slide--current');\r\n                // On check la saison\r\n                slideCurrent.find('.slide__image').prepend('<div class=\"checkSeen\"></div>');\r\n                slideCurrent\r\n                    .removeClass('slide--notSeen')\r\n                    .addClass('slide--seen');\r\n                if (Base_1.Base.debug)\r\n                    console.log('Tous les épisodes de la saison ont été vus', slideCurrent);\r\n                // Si il y a une saison suivante, on la sélectionne\r\n                if (slideCurrent.next().length > 0) {\r\n                    if (Base_1.Base.debug)\r\n                        console.log('Il y a une autre saison');\r\n                    slideCurrent.next().trigger('click');\r\n                    let seasonNumber = _this.show.currentSeason.number + 1;\r\n                    _this.show.setCurrentSeason(seasonNumber);\r\n                    slideCurrent\r\n                        .removeClass('slide--current');\r\n                }\r\n            };\r\n            const lenSeen = jQuery('#episodes .seen').length;\r\n            //if (Base.debug) console.log('Episode.updateRender', {lenEpisodes: lenEpisodes, lenNotSpecial: lenNotSpecial, lenSeen: lenSeen});\r\n            // Si tous les épisodes de la saison ont été vus\r\n            if (lenSeen === lenEpisodes) {\r\n                moveSeason();\r\n            }\r\n            else if (lenSeen === lenNotSpecial) {\r\n                new PopupAlert({\r\n                    title: 'Fin de la saison',\r\n                    text: 'Tous les épisodes de la saison, hors spéciaux, ont été vu.<br/>Voulez-vous passer à la saison suivante ?',\r\n                    callback_yes: () => {\r\n                        moveSeason();\r\n                    },\r\n                    callback_no: () => {\r\n                        return true;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            $elt.css('background', 'rgba(13,21,28,.2)'); // On enlève le check dans la case à cocher\r\n            $elt.removeClass('seen'); // On supprime la classe 'seen'\r\n            $elt.attr('title', Base_1.Base.trans(\"member_shows.markas\"));\r\n            // On remet le voile masquant sur la vignette de l'épisode\r\n            $elt.parent('div.slide__image')\r\n                .find('img')\r\n                .attr('style', 'filter: blur(5px);');\r\n            const contVignette = $elt.parents('div.slide_flex');\r\n            if (!contVignette.hasClass('slide--notSeen')) {\r\n                contVignette.addClass('slide--notSeen');\r\n            }\r\n            if (jQuery('#episodes .seen').length < lenEpisodes) {\r\n                const $seasonCurrent = jQuery('#seasons div.slide--current');\r\n                $seasonCurrent.find('.checkSeen').remove();\r\n                $seasonCurrent\r\n                    .removeClass('slide--seen')\r\n                    .addClass('slide--notSeen');\r\n            }\r\n        }\r\n        if (update) {\r\n            if (this.show instanceof Show_1.Show) {\r\n                this.show.update(true).then(() => {\r\n                    _this.toggleSpinner(false);\r\n                });\r\n            }\r\n            else {\r\n                console.warn('Episode.show is not an instance of class Show', this);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Affiche/masque le spinner de modification des épisodes\r\n     *\r\n     * @param  {boolean}  display  Le flag indiquant si afficher ou masquer\r\n     * @return {Episode}\r\n     */\r\n    toggleSpinner(display) {\r\n        if (!display) {\r\n            jQuery('.spinner').remove();\r\n            if (Base_1.Base.debug)\r\n                console.log('toggleSpinner');\r\n            if (Base_1.Base.debug)\r\n                console.groupEnd();\r\n        }\r\n        else {\r\n            if (Base_1.Base.debug)\r\n                console.groupCollapsed('episode checkSeen');\r\n            if (Base_1.Base.debug)\r\n                console.log('toggleSpinner');\r\n            this.elt.find('.slide__image').prepend(`\r\n                    <div class=\"spinner\">\r\n                        <div class=\"spinner-item\"></div>\r\n                        <div class=\"spinner-item\"></div>\r\n                        <div class=\"spinner-item\"></div>\r\n                    </div>`);\r\n        }\r\n        return this;\r\n    }\r\n}\r\nexports.Episode = Episode;\r\n// }\r\n\n\n//# sourceURL=webpack:///./src/Episode.ts?");

/***/ }),

/***/ "./src/Media.ts":
/*!**********************!*\
  !*** ./src/Media.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Media = void 0;\r\n// namespace BS {\r\nconst Base_1 = __webpack_require__(/*! ./Base */ \"./src/Base.ts\");\r\nconst Similar_1 = __webpack_require__(/*! ./Similar */ \"./src/Similar.ts\");\r\nclass Media extends Base_1.Base {\r\n    followers;\r\n    genres;\r\n    imdb_id;\r\n    language;\r\n    length;\r\n    original_title;\r\n    similars;\r\n    in_account;\r\n    constructor(data) {\r\n        super(data);\r\n        return this.fill(data);\r\n    }\r\n    /**\r\n     * Remplit l'objet avec les données fournit en paramètre\r\n     * @param  {Obj} data Les données provenant de l'API\r\n     * @returns {Media}\r\n     */\r\n    fill(data) {\r\n        this.followers = parseInt(data.followers, 10);\r\n        this.imdb_id = data.imdb_id;\r\n        this.language = data.language;\r\n        this.length = parseInt(data.length, 10);\r\n        this.original_title = data.original_title;\r\n        if (data.similars && data.similars instanceof Array) {\r\n            this.similars = data.similars;\r\n        }\r\n        this.genres = new Array();\r\n        if (data.genres && data.genres instanceof Array) {\r\n            this.genres = data.genres;\r\n        }\r\n        else if (data.genres instanceof Object) {\r\n            for (let g in data.genres) {\r\n                this.genres.push(data.genres[g]);\r\n            }\r\n        }\r\n        this.in_account = data.in_account;\r\n        super.fill(data);\r\n        return this;\r\n    }\r\n    /**\r\n     * Retourne le nombre de similars\r\n     * @returns {number} Le nombre de similars\r\n     */\r\n    get nbSimilars() {\r\n        return this.similars.length;\r\n    }\r\n    /**\r\n     * Retourne les similars associés au media\r\n     * @abstract\r\n     * @return {Promise<Media>}\r\n     */\r\n    fetchSimilars() {\r\n        const _this = this;\r\n        this.similars = [];\r\n        return new Promise((resolve, reject) => {\r\n            Base_1.Base.callApi('GET', this.mediaType.plural, 'similars', { id: this.id, details: true }, true)\r\n                .then(data => {\r\n                if (data.similars.length > 0) {\r\n                    for (let s = 0; s < data.similars.length; s++) {\r\n                        _this.similars.push(new Similar_1.Similar(data.similars[s][_this.mediaType.singular], _this.mediaType));\r\n                    }\r\n                }\r\n                _this.save();\r\n                resolve(_this);\r\n            }, err => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Retourne le similar correspondant à l'identifiant\r\n     * @abstract\r\n     * @param  {number} id      L'identifiant du similar\r\n     * @return {Similar|void}   Le similar ou null\r\n     */\r\n    getSimilar(id) {\r\n        if (!this.similars)\r\n            return null;\r\n        for (let s = 0; s < this.similars.length; s++) {\r\n            if (this.similars[s].id === id) {\r\n                return this.similars[s];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\nexports.Media = Media;\r\n// }\r\n\n\n//# sourceURL=webpack:///./src/Media.ts?");

/***/ }),

/***/ "./src/Movie.ts":
/*!**********************!*\
  !*** ./src/Movie.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Movie = void 0;\r\n// namespace BS {\r\nconst Base_1 = __webpack_require__(/*! ./Base */ \"./src/Base.ts\");\r\nconst Media_1 = __webpack_require__(/*! ./Media */ \"./src/Media.ts\");\r\nclass Movie extends Media_1.Media {\r\n    /***************************************************/\r\n    /*                      STATIC                     */\r\n    /***************************************************/\r\n    /**\r\n     * Methode static servant à retourner un objet show\r\n     * à partir de son ID\r\n     * @param  {number} id             L'identifiant de la série\r\n     * @param  {boolean} [force=false] Indique si on utilise le cache ou non\r\n     * @return {Promise<Movie>}\r\n     */\r\n    static fetch(id, force = false) {\r\n        return new Promise((resolve, reject) => {\r\n            Base_1.Base.callApi('GET', 'movies', 'movie', { id: id }, force)\r\n                .then(data => resolve(new Movie(data, jQuery('.blockInformations'))))\r\n                .catch(err => reject(err));\r\n        });\r\n    }\r\n    /***************************************************/\r\n    /*                  PROPERTIES                     */\r\n    /***************************************************/\r\n    backdrop;\r\n    director;\r\n    original_release_date;\r\n    other_title;\r\n    platform_links;\r\n    poster;\r\n    production_year;\r\n    release_date;\r\n    sale_date;\r\n    tagline;\r\n    tmdb_id;\r\n    trailer;\r\n    url;\r\n    /***************************************************/\r\n    /*                      METHODS                    */\r\n    /***************************************************/\r\n    constructor(data, element) {\r\n        if (data.user.in_account !== undefined) {\r\n            data.in_account = data.user.in_account;\r\n            delete data.user.in_account;\r\n        }\r\n        super(data);\r\n        this.elt = element;\r\n        return this.fill(data);\r\n    }\r\n    /**\r\n     * Remplit l'objet avec les données fournit en paramètre\r\n     * @param  {any} data Les données provenant de l'API\r\n     * @returns {Movie}\r\n     */\r\n    fill(data) {\r\n        if (data.user.in_account !== undefined) {\r\n            data.in_account = data.user.in_account;\r\n            delete data.user.in_account;\r\n        }\r\n        this.backdrop = data.backdrop;\r\n        this.director = data.director;\r\n        this.original_release_date = new Date(data.original_release_date);\r\n        this.other_title = data.other_title;\r\n        this.platform_links = data.platform_links;\r\n        this.poster = data.poster;\r\n        this.production_year = parseInt(data.production_year);\r\n        this.release_date = new Date(data.release_date);\r\n        this.sale_date = new Date(data.sale_date);\r\n        this.tagline = data.tagline;\r\n        this.tmdb_id = parseInt(data.tmdb_id);\r\n        this.trailer = data.trailer;\r\n        this.url = data.url;\r\n        this.mediaType = { singular: Base_1.MediaType.movie, plural: 'movies', className: Movie };\r\n        super.fill(data);\r\n        return this;\r\n    }\r\n}\r\nexports.Movie = Movie;\r\n// }\r\n\n\n//# sourceURL=webpack:///./src/Movie.ts?");

/***/ }),

/***/ "./src/Note.ts":
/*!*********************!*\
  !*** ./src/Note.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Note = void 0;\r\n// namespace BS {\r\nclass Note {\r\n    constructor(data) {\r\n        this.total = parseInt(data.total, 10);\r\n        this.mean = parseInt(data.mean, 10);\r\n        this.user = parseInt(data.user, 10);\r\n    }\r\n    total;\r\n    mean;\r\n    user;\r\n    getPercentage() {\r\n        return Math.round(((this.mean / 5) * 100) / 10) * 10;\r\n    }\r\n    toString() {\r\n        const votes = 'vote' + (this.total > 1 ? 's' : ''), \r\n        // On met en forme le nombre de votes\r\n        total = new Intl.NumberFormat('fr-FR', { style: 'decimal', useGrouping: true }).format(this.total), \r\n        // On limite le nombre de chiffre après la virgule\r\n        note = this.mean.toFixed(1);\r\n        let toString = `${total} ${votes} : ${note} / 5`;\r\n        // On ajoute la note du membre connecté, si il a voté\r\n        if (this.user > 0) {\r\n            toString += `, votre note: ${this.user}`;\r\n        }\r\n        return toString;\r\n    }\r\n}\r\nexports.Note = Note;\r\n// }\r\n\n\n//# sourceURL=webpack:///./src/Note.ts?");

/***/ }),

/***/ "./src/Show.ts":
/*!*********************!*\
  !*** ./src/Show.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Show = exports.Showrunner = exports.Platforms = exports.Platform = exports.Picture = exports.Picked = exports.Images = void 0;\r\n// namespace BS {\r\nconst Base_1 = __webpack_require__(/*! ./Base */ \"./src/Base.ts\");\r\nconst Media_1 = __webpack_require__(/*! ./Media */ \"./src/Media.ts\");\r\nconst Episode_1 = __webpack_require__(/*! ./Episode */ \"./src/Episode.ts\");\r\nclass Images {\r\n    constructor(data) {\r\n        this.show = data.show;\r\n        this.banner = data.banner;\r\n        this.box = data.box;\r\n        this.poster = data.poster;\r\n    }\r\n    show;\r\n    banner;\r\n    box;\r\n    poster;\r\n}\r\nexports.Images = Images;\r\nvar Picked;\r\n(function (Picked) {\r\n    Picked[Picked[\"none\"] = 0] = \"none\";\r\n    Picked[Picked[\"banner\"] = 1] = \"banner\";\r\n    Picked[Picked[\"show\"] = 2] = \"show\";\r\n})(Picked = exports.Picked || (exports.Picked = {}));\r\nclass Picture {\r\n    constructor(data) {\r\n        this.id = parseInt(data.id, 10);\r\n        this.show_id = parseInt(data.show_id, 10);\r\n        this.login_id = parseInt(data.login_id, 10);\r\n        this.url = data.url;\r\n        this.width = parseInt(data.width, 10);\r\n        this.height = parseInt(data.height, 10);\r\n        this.date = new Date(data.date);\r\n        this.picked = data.picked;\r\n    }\r\n    id;\r\n    show_id;\r\n    login_id;\r\n    url;\r\n    width;\r\n    height;\r\n    date;\r\n    picked;\r\n}\r\nexports.Picture = Picture;\r\nclass Platform {\r\n    constructor(data) {\r\n        this.id = parseInt(data.id, 10);\r\n        this.name = data.name;\r\n        this.tag = data.tag;\r\n        this.link_url = data.link_url;\r\n        this.available = data.available;\r\n        this.logo = data.logo;\r\n    }\r\n    id;\r\n    name;\r\n    tag;\r\n    link_url;\r\n    available;\r\n    logo;\r\n}\r\nexports.Platform = Platform;\r\nclass Platforms {\r\n    constructor(data) {\r\n        if (data.svods && data.svods instanceof Array) {\r\n            this.svods = new Array();\r\n            for (let s = 0; s < data.svods.length; s++) {\r\n                this.svods.push(new Platform(data.svods[s]));\r\n            }\r\n        }\r\n        if (data.svod) {\r\n            this.svod = new Platform(data.svod);\r\n        }\r\n    }\r\n    svods;\r\n    svod;\r\n}\r\nexports.Platforms = Platforms;\r\nclass Showrunner {\r\n    constructor(data) {\r\n        this.id = parseInt(data.id, 10);\r\n        this.name = data.name;\r\n        this.picture = data.picture;\r\n    }\r\n    id;\r\n    name;\r\n    picture;\r\n}\r\nexports.Showrunner = Showrunner;\r\nclass Show extends Media_1.Media {\r\n    /***************************************************/\r\n    /*                      STATIC                     */\r\n    /***************************************************/\r\n    /**\r\n     * Methode static servant à retourner un objet show\r\n     * à partir de son ID\r\n     * @param  {number} id             L'identifiant de la série\r\n     * @param  {boolean} [force=false] Indique si on utilise le cache ou non\r\n     * @return {Promise<Show>}\r\n     */\r\n    static fetch(id, force = false) {\r\n        return new Promise((resolve, reject) => {\r\n            Base_1.Base.callApi('GET', 'shows', 'display', { id: id }, force)\r\n                .then(data => resolve(new Show(data, jQuery('.blockInformations'))))\r\n                .catch(err => reject(err));\r\n        });\r\n    }\r\n    /***************************************************/\r\n    /*                  PROPERTIES                     */\r\n    /***************************************************/\r\n    aliases;\r\n    creation;\r\n    country;\r\n    currentSeason;\r\n    images;\r\n    nbEpisodes;\r\n    network;\r\n    next_trailer;\r\n    next_trailer_host;\r\n    rating;\r\n    pictures;\r\n    platforms;\r\n    seasons;\r\n    showrunner;\r\n    social_links;\r\n    status;\r\n    thetvdb_id;\r\n    /***************************************************/\r\n    /*                      METHODS                    */\r\n    /***************************************************/\r\n    constructor(data, element) {\r\n        super(data);\r\n        this.elt = element;\r\n        return this.fill(data);\r\n    }\r\n    /**\r\n     * Remplit l'objet avec les données fournit en paramètre\r\n     * @param  {Obj} data Les données provenant de l'API\r\n     * @returns {Show}\r\n     */\r\n    fill(data) {\r\n        this.aliases = data.aliases;\r\n        this.creation = data.creation;\r\n        this.country = data.country;\r\n        this.images = new Images(data.images);\r\n        this.nbEpisodes = parseInt(data.episodes, 10);\r\n        this.network = data.network;\r\n        this.next_trailer = data.next_trailer;\r\n        this.next_trailer_host = data.next_trailer_host;\r\n        this.rating = data.rating;\r\n        this.platforms = new Platforms(data.platforms);\r\n        this.seasons = new Array();\r\n        for (let s = 0; s < data.seasons_details.length; s++) {\r\n            this.seasons.push(new Episode_1.Season(data.seasons_details[s], this));\r\n        }\r\n        this.showrunner = new Showrunner(data.showrunner);\r\n        this.social_links = data.social_links;\r\n        this.status = data.status;\r\n        this.thetvdb_id = parseInt(data.thetvdb_id, 10);\r\n        this.pictures = new Array();\r\n        this.mediaType = { singular: Base_1.MediaType.show, plural: 'shows', className: Show };\r\n        super.fill(data);\r\n        return this;\r\n    }\r\n    /**\r\n     * Récupère les données de la série sur l'API\r\n     * @param  {boolean} [force=true]   Indique si on utilise les données en cache\r\n     * @return {Promise<*>}             Les données de la série\r\n     */\r\n    fetch(force = true) {\r\n        return Base_1.Base.callApi('GET', 'shows', 'display', { id: this.id }, force);\r\n    }\r\n    /**\r\n     * isEnded - Indique si la série est terminée\r\n     *\r\n     * @return {boolean}  Terminée ou non\r\n     */\r\n    isEnded() {\r\n        return (this.status.toLowerCase() === 'ended') ? true : false;\r\n    }\r\n    /**\r\n     * isArchived - Indique si la série est archivée\r\n     *\r\n     * @return {boolean}  Archivée ou non\r\n     */\r\n    isArchived() {\r\n        return this.user.archived;\r\n    }\r\n    /**\r\n     * isFavorite - Indique si la série est dans les favoris\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isFavorite() {\r\n        return this.user.favorited;\r\n    }\r\n    /**\r\n     * addToAccount - Ajout la série sur le compte du membre connecté\r\n     * @return {Promise<Show>} Promise of show\r\n     */\r\n    addToAccount() {\r\n        const _this = this;\r\n        if (this.in_account)\r\n            return new Promise(resolve => resolve(_this));\r\n        return new Promise((resolve, reject) => {\r\n            Base_1.Base.callApi('POST', 'shows', 'show', { id: _this.id })\r\n                .then(data => {\r\n                _this.fill(data.show);\r\n                _this.save();\r\n                resolve(_this);\r\n            }, err => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Remove Show from account member\r\n     * @return {Promise<Show>} Promise of show\r\n     */\r\n    removeFromAccount() {\r\n        const _this = this;\r\n        if (!this.in_account)\r\n            return new Promise(resolve => resolve(_this));\r\n        return new Promise((resolve, reject) => {\r\n            Base_1.Base.callApi('DELETE', 'shows', 'show', { id: _this.id })\r\n                .then(data => {\r\n                _this.fill(data.show);\r\n                _this.save();\r\n                resolve(this);\r\n            }, err => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Archive la série\r\n     * @return {Promise<Show>} Promise of show\r\n     */\r\n    archive() {\r\n        const _this = this;\r\n        return new Promise((resolve, reject) => {\r\n            Media_1.Media.callApi('POST', 'shows', 'archive', { id: _this.id })\r\n                .then(data => {\r\n                _this.fill(data.show);\r\n                _this.save();\r\n                resolve(_this);\r\n            }, err => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Désarchive la série\r\n     * @return {Promise<Show>} Promise of show\r\n     */\r\n    unarchive() {\r\n        const _this = this;\r\n        return new Promise((resolve, reject) => {\r\n            Media_1.Media.callApi('DELETE', 'shows', 'archive', { id: _this.id })\r\n                .then(data => {\r\n                _this.fill(data.show);\r\n                _this.save();\r\n                resolve(_this);\r\n            }, err => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Ajoute la série aux favoris\r\n     * @return {Promise<Show>} Promise of show\r\n     */\r\n    favorite() {\r\n        const _this = this;\r\n        return new Promise((resolve, reject) => {\r\n            Media_1.Media.callApi('POST', 'shows', 'favorite', { id: _this.id })\r\n                .then(data => {\r\n                _this.fill(data.show);\r\n                _this.save();\r\n                resolve(_this);\r\n            }, err => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Supprime la série des favoris\r\n     * @return {Promise<Show>} Promise of show\r\n     */\r\n    unfavorite() {\r\n        const _this = this;\r\n        return new Promise((resolve, reject) => {\r\n            Media_1.Media.callApi('DELETE', 'shows', 'favorite', { id: _this.id })\r\n                .then(data => {\r\n                _this.fill(data.show);\r\n                _this.save();\r\n                resolve(_this);\r\n            }, err => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Met à jour les données de la série\r\n     * @param  {Boolean}  [force=false] Forcer la récupération des données sur l'API\r\n     * @param  {Function} [cb=noop]     Fonction de callback\r\n     * @return {Promise<Show>}          Promesse (Show)\r\n     */\r\n    update(force = false, cb = Base_1.Base.noop) {\r\n        const _this = this;\r\n        return new Promise((resolve, reject) => {\r\n            _this.fetch(force).then(data => {\r\n                _this.fill(data.show);\r\n                _this.save();\r\n                _this.updateRender(() => {\r\n                    resolve(_this);\r\n                    cb();\r\n                    _this._callListeners(Base_1.EventTypes.UPDATE);\r\n                });\r\n            })\r\n                .catch(err => {\r\n                Media_1.Media.notification('Erreur de récupération de la ressource Show', 'Show update: ' + err);\r\n                reject(err);\r\n                cb();\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Met à jour le rendu de la barre de progression\r\n     * et du prochain épisode\r\n     * @param  {Function} cb Fonction de callback\r\n     * @return {void}\r\n     */\r\n    updateRender(cb = Base_1.Base.noop) {\r\n        this.updateProgressBar();\r\n        this.updateNextEpisode();\r\n        let note = this.objNote;\r\n        if (Base_1.Base.debug) {\r\n            console.log('Next ID et status', {\r\n                next: this.user.next.id,\r\n                status: this.status,\r\n                archived: this.user.archived,\r\n                note_user: note.user\r\n            });\r\n        }\r\n        // Si il n'y a plus d'épisodes à regarder\r\n        if (this.user.remaining === 0) {\r\n            let promise = new Promise(resolve => { return resolve(void 0); });\r\n            // On propose d'archiver si la série n'est plus en production\r\n            if (this.in_account && this.isEnded() && !this.isArchived()) {\r\n                if (Base_1.Base.debug)\r\n                    console.log('Série terminée, popup confirmation archivage');\r\n                promise = new Promise(resolve => {\r\n                    new PopupAlert({\r\n                        title: 'Archivage de la série',\r\n                        text: 'Voulez-vous archiver cette série terminée ?',\r\n                        callback_yes: function () {\r\n                            jQuery('#reactjs-show-actions button.btn-archive').trigger('click');\r\n                            resolve(void 0);\r\n                        },\r\n                        callback_no: function () {\r\n                            resolve(void 0);\r\n                            return true;\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n            // On propose de noter la série\r\n            if (note.user === 0) {\r\n                if (Base_1.Base.debug)\r\n                    console.log('Proposition de voter pour la série');\r\n                promise.then(() => {\r\n                    new PopupAlert({\r\n                        title: Base_1.Base.trans(\"popin.note.title.show\"),\r\n                        text: \"Voulez-vous noter la série ?\",\r\n                        callback_yes: function () {\r\n                            jQuery('.blockInformations__metadatas .js-render-stars').trigger('click');\r\n                            return true;\r\n                        },\r\n                        callback_no: function () {\r\n                            return true;\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n            promise.then(() => { cb(); });\r\n        }\r\n        else {\r\n            cb();\r\n        }\r\n    }\r\n    /**\r\n     * Met à jour la barre de progression de visionnage de la série\r\n     * @return {void}\r\n     */\r\n    updateProgressBar() {\r\n        if (Base_1.Base.debug)\r\n            console.log('updateProgressBar');\r\n        // On met à jour la barre de progression\r\n        jQuery('.progressBarShow').css('width', this.user.status.toFixed(1) + '%');\r\n    }\r\n    /**\r\n     * Met à jour le bloc du prochain épisode à voir\r\n     * @param   {Function} [cb=noop] Fonction de callback\r\n     * @returns {void}\r\n     */\r\n    updateNextEpisode(cb = Base_1.Base.noop) {\r\n        if (Base_1.Base.debug)\r\n            console.log('updateNextEpisode');\r\n        const $nextEpisode = jQuery('a.blockNextEpisode');\r\n        if ($nextEpisode.length > 0 && this.user.next && this.user.next.id !== null) {\r\n            if (Base_1.Base.debug)\r\n                console.log('nextEpisode et show.user.next OK', this.user);\r\n            // Modifier l'image\r\n            const $img = $nextEpisode.find('img'), $remaining = $nextEpisode.find('.remaining div'), $parent = $img.parent('div'), height = $img.attr('height'), width = $img.attr('width'), next = this.user.next, src = `${Base_1.Base.api.url}/pictures/episodes?key=${Base_1.Base.userKey}&id=${next.id}&width=${width}&height=${height}`;\r\n            $img.remove();\r\n            $parent.append(`<img src=\"${src}\" height=\"${height}\" width=\"${width}\" />`);\r\n            // Modifier le titre\r\n            $nextEpisode.find('.titleEpisode').text(`${next.code.toUpperCase()} - ${next.title}`);\r\n            // Modifier le lien\r\n            $nextEpisode.attr('href', $nextEpisode.attr('href').replace(/s\\d{2}e\\d{2}/, next.code.toLowerCase()));\r\n            // Modifier le nombre d'épisodes restants\r\n            $remaining.text($remaining.text().trim().replace(/^\\d+/, this.user.remaining.toString()));\r\n        }\r\n        else if ($nextEpisode.length <= 0 && this.user.next && this.user.next.id !== null) {\r\n            if (Base_1.Base.debug)\r\n                console.log('No nextEpisode et show.user.next OK', this.user);\r\n            buildNextEpisode(this);\r\n        }\r\n        else if (!this.user.next || this.user.next.id === null) {\r\n            $nextEpisode.remove();\r\n        }\r\n        cb();\r\n        /**\r\n         * Construit une vignette pour le prochain épisode à voir\r\n         * @param  {Show} res  Objet API show\r\n         * @return {void}\r\n         */\r\n        function buildNextEpisode(res) {\r\n            const height = 70, width = 124, src = `${Base_1.Base.api.url}/pictures/episodes?key=${Base_1.Base.userKey}&id=${res.user.next.id}&width=${width}&height=${height}`, serieTitle = res.resource_url.split('/').pop();\r\n            jQuery('.blockInformations__actions').after(`<a href=\"/episode/${serieTitle}/${res.user.next.code.toLowerCase()}\" class=\"blockNextEpisode media\">\r\n                        <div class=\"media-left\">\r\n                        <div class=\"u-insideBorderOpacity u-insideBorderOpacity--01\">\r\n                            <img src=\"${src}\" width=\"${width}\" height=\"${height}\">\r\n                        </div>\r\n                        </div>\r\n                        <div class=\"media-body\">\r\n                        <div class=\"title\">\r\n                            <strong>Prochain épisode à regarder</strong>\r\n                        </div>\r\n                        <div class=\"titleEpisode\">\r\n                            ${res.user.next.code.toUpperCase()} - ${res.user.next.title}\r\n                        </div>\r\n                        <div class=\"remaining\">\r\n                            <div class=\"u-colorWhiteOpacity05\">${res.user.remaining} épisode${(res.user.remaining > 1) ? 's' : ''} à regarder</div>\r\n                        </div>\r\n                        </div>\r\n                    </a>`);\r\n        }\r\n    }\r\n    /**\r\n     * On gère l'ajout de la série dans le compte utilisateur\r\n     *\r\n     * @param   {boolean} trigEpisode Flag indiquant si l'appel vient d'un episode vu ou du bouton\r\n     * @returns {void}\r\n     */\r\n    addShowClick(trigEpisode = false) {\r\n        const _this = this;\r\n        const vignettes = $('#episodes .slide__image');\r\n        // Vérifier si le membre a ajouter la série à son compte\r\n        if (!this.in_account) {\r\n            // Remplacer le DOMElement supprime l'eventHandler\r\n            jQuery('#reactjs-show-actions').html(`\r\n                    <div class=\"blockInformations__action\">\r\n                      <button class=\"btn-reset btn-transparent\" type=\"button\">\r\n                        <span class=\"svgContainer\">\r\n                          <svg fill=\"#0D151C\" width=\"14\" height=\"14\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path d=\"M14 8H8v6H6V8H0V6h6V0h2v6h6z\" fill-rule=\"nonzero\"></path>\r\n                          </svg>\r\n                        </span>\r\n                      </button>\r\n                      <div class=\"label\">Ajouter</div>\r\n                    </div>`);\r\n            // On ajoute un event click pour masquer les vignettes\r\n            jQuery('#reactjs-show-actions > div > button').off('click').one('click', (e) => {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                if (Base_1.Base.debug)\r\n                    console.groupCollapsed('AddShow');\r\n                const done = function () {\r\n                    // On met à jour les boutons Archiver et Favori\r\n                    changeBtnAdd(_this);\r\n                    // On met à jour le bloc du prochain épisode à voir\r\n                    _this.updateNextEpisode(function () {\r\n                        if (Base_1.Base.debug)\r\n                            console.groupEnd();\r\n                    });\r\n                };\r\n                _this.addToAccount()\r\n                    .then(() => done(), err => {\r\n                    if (err && err.code !== undefined && err.code === 2003) {\r\n                        done();\r\n                        return;\r\n                    }\r\n                    Base_1.Base.notification('Erreur d\\'ajout de la série', err);\r\n                    if (Base_1.Base.debug)\r\n                        console.groupEnd();\r\n                });\r\n            });\r\n        }\r\n        /**\r\n         * Ajoute les items du menu Options, ainsi que les boutons Archiver et Favoris\r\n         * et on ajoute un voile sur les images des épisodes non-vu\r\n         *\r\n         * @param  {Show} show L'objet de type Show\r\n         * @return {void}\r\n         */\r\n        function changeBtnAdd(show) {\r\n            let $optionsLinks = $('#dropdownOptions').siblings('.dropdown-menu').children('a.header-navigation-item');\r\n            if ($optionsLinks.length <= 2) {\r\n                let react_id = jQuery('script[id^=\"/reactjs/\"]').get(0).id.split('.')[1], urlShow = show.resource_url.substring(location.origin.length), title = show.title.replace(/\"/g, '\\\\\"').replace(/'/g, \"\\\\'\"), templateOpts = `\r\n                              <button type=\"button\" class=\"btn-reset header-navigation-item\" onclick=\"new PopupAlert({\r\n                                showClose: true,\r\n                                type: \"popin-subtitles\",\r\n                                reactModuleId: \"reactjs-subtitles\",\r\n                                params: {\r\n                                  mediaId: \"${show.id}\",\r\n                                  type: \"show\",\r\n                                  titlePopin: \"${title}\";\r\n                                },\r\n                                callback: function() {\r\n                                  loadRecommendationModule('subtitles');\r\n                                  //addScript(\"/reactjs/subtitles.${react_id}.js\", \"module-reactjs-subtitles\");\r\n                                },\r\n                              });\">Sous-titres</button>\r\n                              <a class=\"header-navigation-item\" href=\"javascript:;\" onclick=\"reportItem(${show.id}, 'show');\">Signaler un problème</a>\r\n                              <a class=\"header-navigation-item\" href=\"javascript:;\" onclick=\"showUpdate('${title}', ${show.id}, '0')\">Demander une mise à jour</a>\r\n                              <a class=\"header-navigation-item\" href=\"webcal://www.betaseries.com/cal/i${urlShow}\">Planning iCal de la série</a>\r\n\r\n                              <form class=\"autocomplete js-autocomplete-form header-navigation-item\">\r\n                                <button type=\"reset\" class=\"btn-reset fontWeight700 js-autocomplete-show\" style=\"color: inherit\">Recommander la série</button>\r\n                                <div class=\"autocomplete__toShow\" hidden=\"\">\r\n                                  <input placeholder=\"Nom d'un ami\" type=\"text\" class=\"autocomplete__input js-search-friends\">\r\n                                  <div class=\"autocomplete__response js-display-response\"></div>\r\n                                </div>\r\n                              </form>\r\n                              <a class=\"header-navigation-item\" href=\"javascript:;\">Supprimer de mes séries</a>`;\r\n                if ($optionsLinks.length === 1) {\r\n                    templateOpts = `<a class=\"header-navigation-item\" href=\"${urlShow}/actions\">Vos actions sur la série</a>` + templateOpts;\r\n                }\r\n                jQuery('#dropdownOptions').siblings('.dropdown-menu.header-navigation')\r\n                    .append(templateOpts);\r\n            }\r\n            // On remplace le bouton Ajouter par les boutons Archiver et Favoris\r\n            const divs = jQuery('#reactjs-show-actions > div');\r\n            if (divs.length === 1) {\r\n                jQuery('#reactjs-show-actions').remove();\r\n                let $container = jQuery('.blockInformations__actions'), method = 'prepend';\r\n                // Si le bouton VOD est présent, on place les boutons après\r\n                if ($('#dropdownWatchOn').length > 0) {\r\n                    $container = jQuery('#dropdownWatchOn').parent();\r\n                    method = 'after';\r\n                }\r\n                $container[method](`\r\n                            <div class=\"displayFlex alignItemsFlexStart\"\r\n                                 id=\"reactjs-show-actions\"\r\n                                 data-show-id=\"${show.id}\"\r\n                                 data-user-hasarchived=\"${show.user.archived ? '1' : ''}\"\r\n                                 data-show-inaccount=\"1\"\r\n                                 data-user-id=\"${Base_1.Base.userId}\"\r\n                                 data-show-favorised=\"${show.user.favorited ? '1' : ''}\">\r\n                              <div class=\"blockInformations__action\">\r\n                                <button class=\"btn-reset btn-transparent btn-archive\" type=\"button\">\r\n                                  <span class=\"svgContainer\">\r\n                                    <svg fill=\"#0d151c\" height=\"16\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                      <path d=\"m16 8-1.41-1.41-5.59 5.58v-12.17h-2v12.17l-5.58-5.59-1.42 1.42 8 8z\"></path>\r\n                                    </svg>\r\n                                  </span>\r\n                                </button>\r\n                                <div class=\"label\">${Base_1.Base.trans('show.button.archive.label')}</div>\r\n                              </div>\r\n                              <div class=\"blockInformations__action\">\r\n                                <button class=\"btn-reset btn-transparent btn-favoris\" type=\"button\">\r\n                                  <span class=\"svgContainer\">\r\n                                    <svg fill=\"#FFF\" width=\"20\" height=\"19\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                      <path d=\"M14.5 0c-1.74 0-3.41.81-4.5 2.09C8.91.81 7.24 0 5.5 0 2.42 0 0 2.42 0 5.5c0 3.78 3.4 6.86 8.55 11.54L10 18.35l1.45-1.32C16.6 12.36 20 9.28 20 5.5 20 2.42 17.58 0 14.5 0zm-4.4 15.55l-.1.1-.1-.1C5.14 11.24 2 8.39 2 5.5 2 3.5 3.5 2 5.5 2c1.54 0 3.04.99 3.57 2.36h1.87C11.46 2.99 12.96 2 14.5 2c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z\"></path>\r\n                                    </svg>\r\n                                  </span>\r\n                                </button>\r\n                                <div class=\"label\">${Base_1.Base.trans('show.button.favorite.label')}</div>\r\n                              </div>\r\n                            </div>`);\r\n                show.elt = jQuery('reactjs-show-actions');\r\n                // On ofusque l'image des épisodes non-vu\r\n                let vignette;\r\n                for (let v = 0; v < vignettes.length; v++) {\r\n                    vignette = $(vignettes.get(v));\r\n                    if (vignette.find('.seen').length <= 0) {\r\n                        vignette.find('img.js-lazy-image').attr('style', 'filter: blur(5px);');\r\n                    }\r\n                }\r\n            }\r\n            _this.addEventBtnsArchiveAndFavoris();\r\n            _this.deleteShowClick();\r\n        }\r\n        if (trigEpisode) {\r\n            this.update(true).then(show => {\r\n                changeBtnAdd(show);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Gère la suppression de la série du compte utilisateur\r\n     * @returns {void}\r\n     */\r\n    deleteShowClick() {\r\n        const _this = this;\r\n        let $optionsLinks = $('#dropdownOptions').siblings('.dropdown-menu').children('a.header-navigation-item');\r\n        // Le menu Options est au complet\r\n        if (this.in_account && $optionsLinks.length > 2) {\r\n            this.addEventBtnsArchiveAndFavoris();\r\n            // Gestion de la suppression de la série du compte utilisateur\r\n            $optionsLinks.last().removeAttr('onclick').off('click').on('click', (e) => {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                const done = function () {\r\n                    const afterNotif = function () {\r\n                        // On nettoie les propriétés servant à l'update de l'affichage\r\n                        _this.user.status = 0;\r\n                        _this.user.archived = false;\r\n                        _this.user.favorited = false;\r\n                        _this.user.remaining = 0;\r\n                        _this.user.last = \"S00E00\";\r\n                        _this.user.next.id = null;\r\n                        _this.save();\r\n                        // On remet le bouton Ajouter\r\n                        jQuery('#reactjs-show-actions').html(`\r\n                                <div class=\"blockInformations__action\">\r\n                                  <button class=\"btn-reset btn-transparent btn-add\" type=\"button\">\r\n                                    <span class=\"svgContainer\">\r\n                                      <svg fill=\"#0D151C\" width=\"14\" height=\"14\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                        <path d=\"M14 8H8v6H6V8H0V6h6V0h2v6h6z\" fill-rule=\"nonzero\"></path>\r\n                                      </svg>\r\n                                    </span>\r\n                                  </button>\r\n                                  <div class=\"label\">${Base_1.Base.trans('show.button.add.label')}</div>\r\n                                </div>`);\r\n                        // On supprime les items du menu Options\r\n                        $optionsLinks.first().siblings().each((i, e) => { $(e).remove(); });\r\n                        // Nettoyage de l'affichage des épisodes\r\n                        const checks = jQuery('#episodes .slide_flex');\r\n                        let promise, update = false; // Flag pour l'update de l'affichage\r\n                        if (_this.currentSeason.episodes && _this.currentSeason.episodes.length > 0) {\r\n                            promise = new Promise(resolve => resolve(_this.currentSeason));\r\n                        }\r\n                        else {\r\n                            promise = _this.currentSeason.fetchEpisodes();\r\n                        }\r\n                        promise.then((season) => {\r\n                            for (let e = 0; e < season.episodes.length; e++) {\r\n                                if (season.episodes[e].elt === null) {\r\n                                    season.episodes[e].elt = $(checks.get(e));\r\n                                }\r\n                                if (e === season.episodes.length - 1)\r\n                                    update = true;\r\n                                if (Base_1.Base.debug)\r\n                                    console.log('clean episode %d', e, update);\r\n                                season.episodes[e].updateRender('notSeen', update);\r\n                            }\r\n                            _this.addShowClick();\r\n                        });\r\n                    };\r\n                    new PopupAlert({\r\n                        title: Base_1.Base.trans(\"popup.delete_show_success.title\"),\r\n                        text: Base_1.Base.trans(\"popup.delete_show_success.text\", { \"%title%\": _this.title }),\r\n                        yes: Base_1.Base.trans(\"popup.delete_show_success.yes\"),\r\n                        callback_yes: afterNotif\r\n                    });\r\n                };\r\n                // Supprimer la série du compte utilisateur\r\n                new PopupAlert({\r\n                    title: Base_1.Base.trans(\"popup.delete_show.title\", { \"%title%\": _this.title }),\r\n                    text: Base_1.Base.trans(\"popup.delete_show.text\", { \"%title%\": _this.title }),\r\n                    callback_yes: function () {\r\n                        _this.removeFromAccount()\r\n                            .then(() => done(), err => {\r\n                            if (err && err.code !== undefined && err.code === 2004) {\r\n                                done();\r\n                                return;\r\n                            }\r\n                            Media_1.Media.notification('Erreur de suppression de la série', err);\r\n                        });\r\n                    },\r\n                    callback_no: function () { }\r\n                });\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Ajoute un eventHandler sur les boutons Archiver et Favoris\r\n     * @returns {void}\r\n     */\r\n    addEventBtnsArchiveAndFavoris() {\r\n        const _this = this;\r\n        let $btnArchive = jQuery('#reactjs-show-actions button.btn-archive'), $btnFavoris = jQuery('#reactjs-show-actions button.btn-favoris');\r\n        if ($btnArchive.length === 0 || $btnFavoris.length === 0) {\r\n            $('#reactjs-show-actions button:first').addClass('btn-archive');\r\n            $btnArchive = jQuery('#reactjs-show-actions button.btn-archive');\r\n            $('#reactjs-show-actions button:last').addClass('btn-favoris');\r\n            $btnFavoris = jQuery('#reactjs-show-actions button.btn-favoris');\r\n        }\r\n        // Event bouton Archiver\r\n        $btnArchive.off('click').click((e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            if (Base_1.Base.debug)\r\n                console.groupCollapsed('show-archive');\r\n            // Met à jour le bouton d'archivage de la série\r\n            function updateBtnArchive(promise, transform, label, notif) {\r\n                promise.then(() => {\r\n                    const $parent = $(e.currentTarget).parent();\r\n                    $('span', e.currentTarget).css('transform', transform);\r\n                    $('.label', $parent).text(Base_1.Base.trans(label));\r\n                    if (Base_1.Base.debug)\r\n                        console.groupEnd();\r\n                }, err => {\r\n                    Base_1.Base.notification(notif, err);\r\n                    if (Base_1.Base.debug)\r\n                        console.groupEnd();\r\n                });\r\n            }\r\n            if (!_this.isArchived()) {\r\n                updateBtnArchive(_this.archive(), 'rotate(180deg)', 'show.button.unarchive.label', 'Erreur d\\'archivage de la série');\r\n            }\r\n            else {\r\n                updateBtnArchive(_this.unarchive(), 'rotate(0deg)', 'show.button.archive.label', 'Erreur désarchivage de la série');\r\n            }\r\n        });\r\n        // Event bouton Favoris\r\n        $btnFavoris.off('click').click((e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            if (Base_1.Base.debug)\r\n                console.groupCollapsed('show-favoris');\r\n            if (!_this.isFavorite()) {\r\n                _this.favorite()\r\n                    .then(() => {\r\n                    jQuery(e.currentTarget).children('span').replaceWith(`\r\n                              <span class=\"svgContainer\">\r\n                                <svg width=\"21\" height=\"19\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                  <path d=\"M15.156.91a5.887 5.887 0 0 0-4.406 2.026A5.887 5.887 0 0 0 6.344.909C3.328.91.958 3.256.958 6.242c0 3.666 3.33 6.653 8.372 11.19l1.42 1.271 1.42-1.28c5.042-4.528 8.372-7.515 8.372-11.18 0-2.987-2.37-5.334-5.386-5.334z\"></path>\r\n                                </svg>\r\n                              </span>`);\r\n                    if (Base_1.Base.debug)\r\n                        console.groupEnd();\r\n                }, err => {\r\n                    Base_1.Base.notification('Erreur de favoris de la série', err);\r\n                    if (Base_1.Base.debug)\r\n                        console.groupEnd();\r\n                });\r\n            }\r\n            else {\r\n                _this.unfavorite()\r\n                    .then(() => {\r\n                    $(e.currentTarget).children('span').replaceWith(`\r\n                              <span class=\"svgContainer\">\r\n                                <svg fill=\"#FFF\" width=\"20\" height=\"19\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                  <path d=\"M14.5 0c-1.74 0-3.41.81-4.5 2.09C8.91.81 7.24 0 5.5 0 2.42 0 0 2.42 0 5.5c0 3.78 3.4 6.86 8.55 11.54L10 18.35l1.45-1.32C16.6 12.36 20 9.28 20 5.5 20 2.42 17.58 0 14.5 0zm-4.4 15.55l-.1.1-.1-.1C5.14 11.24 2 8.39 2 5.5 2 3.5 3.5 2 5.5 2c1.54 0 3.04.99 3.57 2.36h1.87C11.46 2.99 12.96 2 14.5 2c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z\"></path>\r\n                                </svg>\r\n                              </span>`);\r\n                    if (Base_1.Base.debug)\r\n                        console.groupEnd();\r\n                }, err => {\r\n                    Base_1.Base.notification('Erreur de favoris de la série', err);\r\n                    if (Base_1.Base.debug)\r\n                        console.groupEnd();\r\n                });\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Ajoute la classification dans les détails de la ressource\r\n     */\r\n    addRating() {\r\n        if (Base_1.Base.debug)\r\n            console.log('addRating');\r\n        if (this.rating) {\r\n            let rating = Base_1.Base.ratings[this.rating] !== undefined ? Base_1.Base.ratings[this.rating] : null;\r\n            if (rating !== null) {\r\n                // On ajoute la classification\r\n                jQuery('.blockInformations__details')\r\n                    .append(`<li id=\"rating\"><strong>Classification</strong>\r\n                            <img src=\"${rating.img}\" title=\"${rating.title}\"/>\r\n                        </li>`);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Définit la saison courante\r\n     * @param   {number} seasonNumber Le numéro de la saison courante\r\n     * @returns {Show}  L'instance de la série\r\n     * @throws  {Error} if seasonNumber is out of range of seasons\r\n     */\r\n    setCurrentSeason(seasonNumber) {\r\n        if (seasonNumber < 0 || seasonNumber >= this.seasons.length) {\r\n            throw new Error(\"seasonNumber is out of range of seasons\");\r\n        }\r\n        this.currentSeason = this.seasons[seasonNumber];\r\n        return this;\r\n    }\r\n}\r\nexports.Show = Show;\r\n// }\r\n\n\n//# sourceURL=webpack:///./src/Show.ts?");

/***/ }),

/***/ "./src/Similar.ts":
/*!************************!*\
  !*** ./src/Similar.ts ***!
  \************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Similar = void 0;\r\n// namespace BS {\r\nconst Base_1 = __webpack_require__(/*! ./Base */ \"./src/Base.ts\");\r\nconst Media_1 = __webpack_require__(/*! ./Media */ \"./src/Media.ts\");\r\nconst Episode_1 = __webpack_require__(/*! ./Episode */ \"./src/Episode.ts\");\r\nconst Show_1 = __webpack_require__(/*! ./Show */ \"./src/Show.ts\");\r\nclass Similar extends Media_1.Media {\r\n    /* Interface implMovie */\r\n    backdrop;\r\n    director;\r\n    original_release_date;\r\n    other_title;\r\n    platform_links;\r\n    poster;\r\n    production_year;\r\n    release_date;\r\n    sale_date;\r\n    tagline;\r\n    tmdb_id;\r\n    trailer;\r\n    url;\r\n    /* Interface implShow */\r\n    aliases;\r\n    creation;\r\n    country;\r\n    images;\r\n    nbEpisodes;\r\n    network;\r\n    next_trailer;\r\n    next_trailer_host;\r\n    rating;\r\n    pictures;\r\n    platforms;\r\n    seasons;\r\n    showrunner;\r\n    social_links;\r\n    status;\r\n    thetvdb_id;\r\n    constructor(data, type) {\r\n        if (type.singular === Base_1.MediaType.movie) {\r\n            data.in_account = data.user.in_account;\r\n            delete data.user.in_account;\r\n            data.description = data.synopsis;\r\n            delete data.synopsis;\r\n        }\r\n        super(data);\r\n        this.mediaType = type;\r\n        return this.fill(data);\r\n    }\r\n    /**\r\n     * Remplit l'objet avec les données fournit en paramètre\r\n     * @param  {Obj} data Les données provenant de l'API\r\n     * @returns {Similar}\r\n     */\r\n    fill(data) {\r\n        if (this.mediaType.singular === Base_1.MediaType.show) {\r\n            this.aliases = data.aliases;\r\n            this.creation = data.creation;\r\n            this.country = data.country;\r\n            this.images = new Show_1.Images(data.images);\r\n            this.nbEpisodes = parseInt(data.episodes, 10);\r\n            this.network = data.network;\r\n            this.next_trailer = data.next_trailer;\r\n            this.next_trailer_host = data.next_trailer_host;\r\n            this.rating = data.rating;\r\n            this.platforms = new Show_1.Platforms(data.platforms);\r\n            this.seasons = new Array();\r\n            for (let s = 0; s < data.seasons_details.length; s++) {\r\n                this.seasons.push(new Episode_1.Season(data.seasons_details[s], this));\r\n            }\r\n            this.showrunner = new Show_1.Showrunner(data.showrunner);\r\n            this.social_links = data.social_links;\r\n            this.status = data.status;\r\n            this.thetvdb_id = parseInt(data.thetvdb_id, 10);\r\n            this.pictures = new Array();\r\n        }\r\n        else if (this.mediaType.singular === Base_1.MediaType.movie) {\r\n            if (data.user.in_account !== undefined) {\r\n                data.in_account = data.user.in_account;\r\n                delete data.user.in_account;\r\n            }\r\n            if (data.synopsis !== undefined) {\r\n                data.description = data.synopsis;\r\n                delete data.synopsis;\r\n            }\r\n            this.backdrop = data.backdrop;\r\n            this.director = data.director;\r\n            this.original_release_date = new Date(data.original_release_date);\r\n            this.other_title = data.other_title;\r\n            this.platform_links = data.platform_links;\r\n            this.poster = data.poster;\r\n            this.production_year = parseInt(data.production_year);\r\n            this.release_date = new Date(data.release_date);\r\n            this.sale_date = new Date(data.sale_date);\r\n            this.tagline = data.tagline;\r\n            this.tmdb_id = parseInt(data.tmdb_id);\r\n            this.trailer = data.trailer;\r\n            this.url = data.url;\r\n        }\r\n        super.fill(data);\r\n        return this;\r\n    }\r\n    /**\r\n     * Récupère les données de la série sur l'API\r\n     * @param  {boolean} [force=true]   Indique si on utilise les données en cache\r\n     * @return {Promise<*>}             Les données de la série\r\n     */\r\n    fetch(force = true) {\r\n        let action = 'display';\r\n        if (this.mediaType.singular === Base_1.MediaType.movie) {\r\n            action = 'movie';\r\n        }\r\n        return Base_1.Base.callApi('GET', this.mediaType.plural, action, { id: this.id }, force);\r\n    }\r\n    /**\r\n     * Ajoute le bandeau Viewed sur le poster du similar\r\n     * @return {Similar}\r\n     */\r\n    addViewed() {\r\n        // Si la série a été vue ou commencée\r\n        if (this.user.status &&\r\n            ((this.mediaType.singular === Base_1.MediaType.movie && this.user.status === 1) ||\r\n                (this.mediaType.singular === Base_1.MediaType.show && this.user.status > 0))) {\r\n            // On ajoute le bandeau \"Viewed\"\r\n            this.elt.find('a.slide__image').prepend(`<img src=\"${Base_1.Base.serverBaseUrl}/img/viewed.png\" class=\"bandViewed\"/>`);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Ajoute l'icône wrench à côté du titre du similar\r\n     * pour permettre de visualiser les données du similar\r\n     * @return {Similar}\r\n     */\r\n    wrench() {\r\n        const $title = this.elt.find('.slide__title'), _this = this;\r\n        $title.html($title.html() +\r\n            `<i class=\"fa fa-wrench popover-wrench\"\r\n                  aria-hidden=\"true\"\r\n                  style=\"margin-left:5px;cursor:pointer;\"\r\n                  data-id=\"${_this.id}\"\r\n                  data-type=\"${_this.mediaType.singular}\">\r\n               </i>`);\r\n        $title.find('.popover-wrench').click((e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            const $dataRes = $('#dialog-resource .data-resource'), // DOMElement contenant le rendu JSON de la ressource\r\n            html = document.documentElement;\r\n            const onShow = function () {\r\n                html.style.overflowY = 'hidden';\r\n                jQuery('#dialog-resource')\r\n                    .css('z-index', '1005')\r\n                    .css('overflow', 'scroll');\r\n            };\r\n            const onHide = function () {\r\n                html.style.overflowY = '';\r\n                jQuery('#dialog-resource')\r\n                    .css('z-index', '0')\r\n                    .css('overflow', 'none');\r\n            };\r\n            //if (debug) console.log('Popover Wrench', eltId, self);\r\n            this.fetch().then(function (data) {\r\n                $dataRes.empty().append(renderjson.set_show_to_level(2)(data[_this.mediaType.singular]));\r\n                jQuery('#dialog-resource-title span.counter').empty().text('(' + Base_1.Base.counter + ' appels API)');\r\n                jQuery('#dialog-resource').show(400, onShow);\r\n                jQuery('#dialog-resource .close').click((e) => {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    jQuery('#dialog-resource').hide(400, onHide);\r\n                });\r\n            });\r\n        });\r\n        return this;\r\n    }\r\n    /**\r\n     * Retourne le contenu HTML pour la popup\r\n     * de présentation du similar\r\n     * @return {string}\r\n     */\r\n    getContentPopup() {\r\n        const _this = this;\r\n        //if (debug) console.log('similars tempContentPopup', objRes);\r\n        let description = this.description;\r\n        if (description.length > 200) {\r\n            description = description.substring(0, 200) + '…';\r\n        }\r\n        let template = '';\r\n        function _renderCreation() {\r\n            let html = '';\r\n            if (_this.creation || _this.country || _this.production_year) {\r\n                html += '<p>';\r\n                if (_this.creation) {\r\n                    html += `<u>Création:</u> <strong>${_this.creation}</strong>`;\r\n                }\r\n                if (_this.production_year) {\r\n                    html += `<u>Production:</u> <strong>${_this.production_year}</strong>`;\r\n                }\r\n                if (_this.country) {\r\n                    html += `, <u>Pays:</u> <strong>${_this.country}</strong>`;\r\n                }\r\n                html += '</p>';\r\n            }\r\n            return html;\r\n        }\r\n        function _renderGenres() {\r\n            if (_this.genres && _this.genres.length > 0) {\r\n                return '<p><u>Genres:</u> ' + _this.genres.join(', ') + '</p>';\r\n            }\r\n            return '';\r\n        }\r\n        template = '<div>';\r\n        if (this.mediaType.singular === Base_1.MediaType.show) {\r\n            const status = this.status.toLowerCase() == 'ended' ? 'Terminée' : 'En cours';\r\n            const seen = (this.user.status > 0) ? 'Vu à <strong>' + this.user.status + '%</strong>' : 'Pas vu';\r\n            template += `<p><strong>${this.seasons.length}</strong> saison${(this.seasons.length > 1 ? 's' : '')}, <strong>${this.nbEpisodes}</strong> épisodes, `;\r\n            if (this.objNote.total > 0) {\r\n                template += `<strong>${this.objNote.total}</strong> votes`;\r\n                if (this.objNote.user > 0) {\r\n                    template += `, votre note: ${this.objNote.user}`;\r\n                }\r\n                template += '</p>';\r\n            }\r\n            else {\r\n                template += 'Aucun vote</p>';\r\n            }\r\n            if (!this.in_account) {\r\n                template += '<p><a href=\"javascript:;\" class=\"addShow\">Ajouter</a></p>';\r\n            }\r\n            template += _renderGenres();\r\n            template += _renderCreation();\r\n            let archived = '';\r\n            if (this.user.status > 0 && this.user.archived === true) {\r\n                archived = ', Archivée: <i class=\"fa fa-check-circle-o\" aria-hidden=\"true\"></i>';\r\n            }\r\n            else if (this.user.status > 0) {\r\n                archived = ', Archivée: <i class=\"fa fa-circle-o\" aria-hidden=\"true\"></i>';\r\n            }\r\n            if (this.showrunner && this.showrunner.name.length > 0) {\r\n                template += `<p><u>Show Runner:</u> <strong>${this.showrunner.name}</strong></p>`;\r\n            }\r\n            template += `<p><u>Statut:</u> <strong>${status}</strong>, ${seen}${archived}</p>`;\r\n        }\r\n        // movie\r\n        else {\r\n            template += '<p>';\r\n            if (this.objNote.total > 0) {\r\n                template += `<strong>${this.objNote.total}</strong> votes`;\r\n                if (this.objNote.user > 0) {\r\n                    template += `, votre note: ${this.objNote.user}`;\r\n                }\r\n            }\r\n            else {\r\n                template += 'Aucun vote';\r\n            }\r\n            template += '</p>';\r\n            // Ajouter une case à cocher pour l'état \"Vu\"\r\n            template += `<p><label for=\"seen\">Vu</label>\r\n                    <input type=\"checkbox\" class=\"movie movieSeen\" name=\"seen\" data-movie=\"${this.id}\" ${this.user.status === 1 ? 'checked' : ''} style=\"margin-right:5px;\"></input>`;\r\n            // Ajouter une case à cocher pour l'état \"A voir\"\r\n            template += `<label for=\"mustSee\">A voir</label>\r\n                    <input type=\"checkbox\" class=\"movie movieMustSee\" name=\"mustSee\" data-movie=\"${this.id}\" ${this.user.status === 0 ? 'checked' : ''} style=\"margin-right:5px;\"></input>`;\r\n            // Ajouter une case à cocher pour l'état \"Ne pas voir\"\r\n            template += `<label for=\"notSee\">Ne pas voir</label>\r\n                    <input type=\"checkbox\" class=\"movie movieNotSee\" name=\"notSee\" data-movie=\"${this.id}\"  ${this.user.status === 2 ? 'checked' : ''}></input></p>`;\r\n            template += _renderGenres();\r\n            template += _renderCreation();\r\n            if (this.director) {\r\n                template += `<p><u>Réalisateur:</u> <strong>${this.director}</strong></p>`;\r\n            }\r\n        }\r\n        return template + `<p>${description}</p></div>`;\r\n    }\r\n    /**\r\n     * Retourne le contenu HTML du titre de la popup\r\n     * @return {string}\r\n     */\r\n    getTitlePopup() {\r\n        if (Base_1.Base.debug)\r\n            console.log('getTitlePopup', this);\r\n        let title = this.title;\r\n        if (this.objNote.total > 0) {\r\n            title += ' <span style=\"font-size: 0.8em;color:#000;\">' +\r\n                this.objNote.mean.toFixed(2) + ' / 5</span>';\r\n        }\r\n        return title;\r\n    }\r\n    /**\r\n     * Met à jour l'attribut title de la note du similar\r\n     * @param  {Boolean} change Indique si il faut modifier l'attribut\r\n     * @return {string}         La valeur modifiée de l'attribut title\r\n     */\r\n    updateTitleNote(change = true) {\r\n        const $elt = this.elt.find('.stars-outer');\r\n        if (this.objNote.mean <= 0 || this.objNote.total <= 0) {\r\n            if (change)\r\n                $elt.attr('title', 'Aucun vote');\r\n            return '';\r\n        }\r\n        const title = this.objNote.toString();\r\n        if (change) {\r\n            $elt.attr('title', title);\r\n        }\r\n        return title;\r\n    }\r\n    /**\r\n     * Ajoute la note, sous forme d'étoiles, du similar sous son titre\r\n     * @return {Similar}\r\n     */\r\n    renderStars() {\r\n        // On ajoute le code HTML pour le rendu de la note\r\n        this.elt.find('.slide__title').after('<div class=\"stars-outer\"><div class=\"stars-inner\"></div></div>');\r\n        this.updateTitleNote();\r\n        this.elt.find('.stars-inner').width(this.objNote.getPercentage() + '%');\r\n        return this;\r\n    }\r\n    /**\r\n     * Vérifie la présence de l'image du similar\r\n     * et tente d'en trouver une si celle-ci n'est pas présente\r\n     * @return {Similar}\r\n     */\r\n    checkImg() {\r\n        const $img = this.elt.find('img.js-lazy-image'), _this = this;\r\n        if ($img.length <= 0) {\r\n            if (this.mediaType.singular === Base_1.MediaType.show && this.thetvdb_id && this.thetvdb_id > 0) {\r\n                // On tente de remplacer le block div 404 par une image\r\n                this.elt.find('div.block404').replaceWith(`\r\n                        <img class=\"u-opacityBackground fade-in\"\r\n                             width=\"125\"\r\n                             height=\"188\"\r\n                             alt=\"Poster de ${this.title}\"\r\n                             src=\"https://artworks.thetvdb.com/banners/posters/${this.thetvdb_id}-1.jpg\"/>`);\r\n            }\r\n            else if (this.mediaType.singular === Base_1.MediaType.movie && this.tmdb_id && this.tmdb_id > 0) {\r\n                if (Base_1.Base.themoviedb_api_user_key.length <= 0)\r\n                    return;\r\n                const uriApiTmdb = `https://api.themoviedb.org/3/movie/${this.tmdb_id}?api_key=${Base_1.Base.themoviedb_api_user_key}&language=fr-FR`;\r\n                fetch(uriApiTmdb).then(response => {\r\n                    if (!response.ok)\r\n                        return null;\r\n                    return response.json();\r\n                }).then(data => {\r\n                    if (data !== null && data.poster_path !== undefined && data.poster_path !== null) {\r\n                        _this.elt.find('div.block404').replaceWith(`\r\n                                <img class=\"u-opacityBackground fade-in\"\r\n                                     width=\"125\"\r\n                                     height=\"188\"\r\n                                     alt=\"Poster de ${_this.title}\"\r\n                                     src=\"https://image.tmdb.org/t/p/original${data.poster_path}\"/>`);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Add Show to account member\r\n     * @return {Promise<Similar>} Promise of show\r\n     */\r\n    addToAccount(state = 0) {\r\n        const _this = this;\r\n        if (this.in_account)\r\n            return new Promise(resolve => resolve(_this));\r\n        let params = { id: this.id };\r\n        if (this.mediaType.singular === Base_1.MediaType.movie) {\r\n            params.state = state;\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            Base_1.Base.callApi('POST', _this.mediaType.plural, _this.mediaType.singular, params)\r\n                .then(data => {\r\n                _this.fill(data[_this.mediaType.singular]).save();\r\n                resolve(_this);\r\n            }, err => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n}\r\nexports.Similar = Similar;\r\n// }\r\n\n\n//# sourceURL=webpack:///./src/Similar.ts?");

/***/ }),

/***/ "./src/Subtitle.ts":
/*!*************************!*\
  !*** ./src/Subtitle.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Subtitle = void 0;\r\n// namespace BS {\r\nclass Subtitle {\r\n    constructor(data) {\r\n        this.id = parseInt(data.id, 10);\r\n        this.language = data.language;\r\n        this.source = data.source;\r\n        this.quality = parseInt(data.quality, 10);\r\n        this.file = data.file;\r\n        this.url = data.url;\r\n        this.date = new Date(data.date);\r\n    }\r\n    id;\r\n    language;\r\n    source;\r\n    quality;\r\n    file;\r\n    url;\r\n    date;\r\n}\r\nexports.Subtitle = Subtitle;\r\n// }\r\n\n\n//# sourceURL=webpack:///./src/Subtitle.ts?");

/***/ }),

/***/ "./src/UpdateAuto.ts":
/*!***************************!*\
  !*** ./src/UpdateAuto.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UpdateAuto = void 0;\r\nconst Base_1 = __webpack_require__(/*! ./Base */ \"./src/Base.ts\");\r\nclass UpdateAuto {\r\n    static instance;\r\n    static intervals = [\r\n        { val: 0, label: 'Jamais' },\r\n        { val: 1, label: '1 min.' },\r\n        { val: 5, label: '5 min.' },\r\n        { val: 10, label: '10 min.' },\r\n        { val: 15, label: '15 min.' },\r\n        { val: 30, label: '30 min.' },\r\n        { val: 45, label: '45 min.' },\r\n        { val: 60, label: '60 min.' }\r\n    ];\r\n    _show;\r\n    _showId;\r\n    _exist;\r\n    _status;\r\n    _auto;\r\n    _interval;\r\n    _timer;\r\n    constructor(show) {\r\n        this._show = show;\r\n        this._showId = show.id;\r\n        let objUpAuto = GM_getValue('objUpAuto');\r\n        this._exist = false;\r\n        if (objUpAuto[this._showId] !== undefined) {\r\n            this._exist = true;\r\n            this._status = objUpAuto[this._showId].status;\r\n            this._auto = objUpAuto[this._showId].auto;\r\n            this._interval = objUpAuto[this._showId].interval;\r\n        }\r\n        else {\r\n            this._status = false; // Statut de la tâche d'update\r\n            this._auto = false; // Autorise l'activation de la tâche d'update des épisodes\r\n            this._interval = 0; // Intervalle de temps entre les mises à jour\r\n        }\r\n        this.changeColorBtn();\r\n        return this;\r\n    }\r\n    static getInstance(s) {\r\n        if (!UpdateAuto.instance) {\r\n            UpdateAuto.instance = new UpdateAuto(s);\r\n        }\r\n        return UpdateAuto.instance;\r\n    }\r\n    /**\r\n     * _save - Sauvegarde les options de la tâche d'update\r\n     * auto dans l'espace de stockage de Tampermonkey\r\n     *\r\n     * @return {UpdateAuto} L'instance unique UpdateAuto\r\n     */\r\n    _save() {\r\n        let objUpAuto = GM_getValue('objUpAuto');\r\n        let obj = {\r\n            status: this._status,\r\n            auto: this._auto,\r\n            interval: this._interval\r\n        };\r\n        objUpAuto[this._showId] = obj;\r\n        GM_setValue('objUpAuto', objUpAuto);\r\n        this._exist = true;\r\n        this.changeColorBtn();\r\n        return this;\r\n    }\r\n    /**\r\n     * get status - Retourne le statut de la tâche d'update auto\r\n     * des épisodes\r\n     *\r\n     * @return {boolean}  Le statut\r\n     */\r\n    get status() {\r\n        return this._status;\r\n    }\r\n    /**\r\n     * set status - Modifie le statut de la tâche d'update auto\r\n     * des épisodes\r\n     *\r\n     * @param  {boolean} status Le statut de la tâche\r\n     */\r\n    set status(status) {\r\n        this._status = status;\r\n        this._save();\r\n    }\r\n    /**\r\n     * get auto - Flag indiquant l'autorisation de pouvoir lancer\r\n     * la tâche d'update auto\r\n     *\r\n     * @return {boolean}  Flag d'autorisation\r\n     */\r\n    get auto() {\r\n        return this._auto;\r\n    }\r\n    /**\r\n     * set auto - Modifie l'autorisation de lancer la tâche\r\n     * d'update auto\r\n     *\r\n     * @param  {boolean} auto Le flag\r\n     */\r\n    set auto(auto) {\r\n        this._auto = auto;\r\n        this._save();\r\n    }\r\n    /**\r\n     * get interval - Retourne l'intervalle de temps entre\r\n     * chaque update auto\r\n     *\r\n     * @return {number}  L'intervalle de temps en minutes\r\n     */\r\n    get interval() {\r\n        return this._interval;\r\n    }\r\n    /**\r\n     * set interval - Définit l'intervalle de temps, en minutes,\r\n     * entre chaque update auto\r\n     *\r\n     * @param  {number} val L'intervalle de temps en minutes\r\n     */\r\n    set interval(val) {\r\n        this._interval = val;\r\n        this._save();\r\n    }\r\n    /**\r\n     * changeColorBtn - Modifie la couleur du bouton d'update\r\n     * des épisodes sur la page Web\r\n     *\r\n     * @return {UpdateAuto} L'instance unique UpdateAuto\r\n     */\r\n    changeColorBtn() {\r\n        let color = '#fff';\r\n        if (!this._exist) {\r\n            color = '#6c757d'; // grey\r\n        }\r\n        else if (this._status && this._auto) {\r\n            color = 'green';\r\n        }\r\n        else if (this._auto && !this._status) {\r\n            color = 'orange';\r\n        }\r\n        else if (!this._auto && !this._status) {\r\n            color = 'red';\r\n        }\r\n        $('.updateEpisodes').css('color', color);\r\n        return this;\r\n    }\r\n    /**\r\n     * stop - Permet de stopper la tâche d'update auto et\r\n     * aussi de modifier le flag et l'intervalle en fonction\r\n     * de l'état de la série\r\n     *\r\n     * @return {UpdateAuto} L'instance unique UpdateAuto\r\n     */\r\n    stop() {\r\n        if (this._show.user.remaining <= 0 && this._show.isEnded()) {\r\n            this._auto = false;\r\n            this._interval = 0;\r\n        }\r\n        else if (this._show.user.remaining <= 0) {\r\n            this._auto = false;\r\n        }\r\n        this.status = false;\r\n        clearInterval(this._timer);\r\n        this._timer = null;\r\n        return this;\r\n    }\r\n    /**\r\n     * delete - Supprime les options d'update auto\r\n     * de la série de l'espace de stockage\r\n     *\r\n     * @return {UpdateAuto} L'instance unique UpdateAuto\r\n     */\r\n    delete() {\r\n        this.stop();\r\n        let objUpAuto = GM_getValue('objUpAuto');\r\n        if (objUpAuto[this._showId] !== undefined) {\r\n            delete objUpAuto[this._showId];\r\n            GM_setValue('objUpAuto', objUpAuto);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * launch - Permet de lancer la tâche d'update auto\r\n     * des épisodes\r\n     *\r\n     * @return {UpdateAuto} L'instance unique UpdateAuto\r\n     */\r\n    launch() {\r\n        // Si les options sont modifiées pour arrêter la tâche\r\n        // et que le statut est en cours\r\n        if (this._status && (!this._auto || this._interval <= 0)) {\r\n            if (Base_1.Base.debug)\r\n                console.log('close interval updateEpisodeListAuto');\r\n            return this.stop();\r\n        }\r\n        // Si les options modifiées pour lancer\r\n        else if (this._auto && this._interval > 0) {\r\n            if (this._show.user.remaining <= 0) {\r\n                this.stop();\r\n                return this;\r\n            }\r\n            this.status = true;\r\n            if (this._timer) {\r\n                if (Base_1.Base.debug)\r\n                    console.log('close old interval timer');\r\n                clearInterval(this._timer);\r\n            }\r\n            const _this = this;\r\n            this._timer = setInterval(function () {\r\n                // if (debug) console.log('UpdateAuto setInterval objShow', Object.assign({}, _this._objShow));\r\n                if (!_this._auto || _this._show.user.remaining <= 0) {\r\n                    if (Base_1.Base.debug)\r\n                        console.log('Arrêt de la mise à jour auto des épisodes');\r\n                    _this.stop();\r\n                    return;\r\n                }\r\n                if (Base_1.Base.debug)\r\n                    console.log('update episode list');\r\n                const btnUpEpisodeList = $('.updateEpisodes');\r\n                if (btnUpEpisodeList.length > 0) {\r\n                    btnUpEpisodeList.trigger('click');\r\n                    if (!_this._status) {\r\n                        _this.status = true;\r\n                    }\r\n                }\r\n            }, (this._interval * 60) * 1000);\r\n        }\r\n        return this;\r\n    }\r\n}\r\nexports.UpdateAuto = UpdateAuto;\r\n\n\n//# sourceURL=webpack:///./src/UpdateAuto.ts?");

/***/ }),

/***/ "./src/User.ts":
/*!*********************!*\
  !*** ./src/User.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.User = void 0;\r\n// namespace BS {\r\nclass Next {\r\n    constructor(data) {\r\n        this.id = parseInt(data.id, 10);\r\n        this.code = data.code;\r\n        this.date = new Date(data.date);\r\n        this.title = data.title;\r\n        this.image = data.image;\r\n    }\r\n    id;\r\n    code;\r\n    date;\r\n    title;\r\n    image;\r\n}\r\nclass User {\r\n    constructor(data) {\r\n        this.archived = data.archived;\r\n        this.downloaded = data.downloaded;\r\n        this.favorited = data.favorited;\r\n        this.friends_want_to_watch = data.friends_want_to_watch;\r\n        this.friends_watched = data.friends_watched;\r\n        this.hidden = data.hidden;\r\n        this.last = data.last;\r\n        this.mail = data.mail;\r\n        this.next = new Next(data.next);\r\n        this.profile = data.profile;\r\n        this.remaining = data.remaining;\r\n        this.seen = data.seen;\r\n        this.status = parseInt(data.status, 10);\r\n        this.tags = data.tags;\r\n        this.twitter = data.twitter;\r\n    }\r\n    archived;\r\n    downloaded;\r\n    favorited;\r\n    friends_want_to_watch;\r\n    friends_watched;\r\n    hidden;\r\n    last;\r\n    mail;\r\n    next;\r\n    profile;\r\n    remaining;\r\n    seen;\r\n    status;\r\n    tags;\r\n    twitter;\r\n}\r\nexports.User = User;\r\n// }\r\n\n\n//# sourceURL=webpack:///./src/User.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst Cache_1 = __webpack_require__(/*! ./Cache */ \"./src/Cache.ts\");\r\nconst Base_1 = __webpack_require__(/*! ./Base */ \"./src/Base.ts\");\r\nconst Media_1 = __webpack_require__(/*! ./Media */ \"./src/Media.ts\");\r\nconst Show_1 = __webpack_require__(/*! ./Show */ \"./src/Show.ts\");\r\nconst Movie_1 = __webpack_require__(/*! ./Movie */ \"./src/Movie.ts\");\r\nconst Episode_1 = __webpack_require__(/*! ./Episode */ \"./src/Episode.ts\");\r\nconst UpdateAuto_1 = __webpack_require__(/*! ./UpdateAuto */ \"./src/UpdateAuto.ts\");\r\n'use strict';\r\n/************************************************************************************************/\r\n/*                               PARAMETRES A MODIFIER                                          */\r\n/************************************************************************************************/\r\nlet betaseries_api_user_token = '';\r\n/* Ajouter ici votre clé d'API BetaSeries (Demande de clé API: https://www.betaseries.com/api/) */\r\nlet betaseries_api_user_key = '';\r\n/* Ajouter ici votre clé d'API V3 à themoviedb */\r\nlet themoviedb_api_user_key = '';\r\n/* Ajouter ici l'URL de base de votre serveur distribuant les CSS, IMG et JS */\r\nconst serverBaseUrl = 'https://azema.github.io/betaseries-oauth';\r\n/************************************************************************************************/\r\n(function ($) {\r\n    const debug = false, url = location.pathname, noop = function () { }, regexUser = new RegExp('^/membre/[A-Za-z0-9]*$'), \r\n    // Objet contenant les scripts et feuilles de style utilisées par le userscript\r\n    scriptsAndStyles = {\r\n        \"moment\": {\r\n            type: 'script',\r\n            id: 'jsmomment',\r\n            src: 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js',\r\n            integrity: 'sha512-qTXRIMyZIFb8iQcfjXWCO8+M5Tbc38Qi5WzdPOYZHIlZpzBHG3L3by84BBBOiRGiEb7KKtAOAs5qYdUiZiQNNQ=='\r\n        },\r\n        \"localefr\": {\r\n            type: 'script',\r\n            id: 'jslocalefr',\r\n            src: 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/locale/fr.min.js',\r\n            integrity: 'sha512-RAt2+PIRwJiyjWpzvvhKAG2LEdPpQhTgWfbEkFDCo8wC4rFYh5GQzJBVIFDswwaEDEYX16GEE/4fpeDNr7OIZw=='\r\n        },\r\n        \"popover\": {\r\n            type: 'style',\r\n            id: 'csspopover',\r\n            href: `${serverBaseUrl}/css/popover.min.css`,\r\n            integrity: 'sha384-0+WYbwjuMdB+tkwXZjC24CjnKegI87PHNRai4K6AXIKTgpetZCQJ9dNVqJ5dUnpg'\r\n        },\r\n        \"bootstrap\": {\r\n            type: 'script',\r\n            id: 'jsbootstrap',\r\n            src: 'https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js',\r\n            integrity: 'sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl'\r\n        },\r\n        \"tablecss\": {\r\n            type: 'style',\r\n            id: 'tablecss',\r\n            href: `${serverBaseUrl}/css/table.min.css`,\r\n            integrity: 'sha384-83x9kix7Q4F8l4FQwGfdbntFyjmZu3F1fB8IAfWdH4cNFiXYqAVrVArnil0rkc1p'\r\n        },\r\n        \"stylehome\": {\r\n            type: 'style',\r\n            id: 'stylehome',\r\n            href: `${serverBaseUrl}/css/style.min.css`,\r\n            integrity: 'sha384-z4aam29xkOKmgpOUGhk9kS8/SutkQeUtEBBXm2NYiZFc2CJSvH5hothze+P0/dz8'\r\n        },\r\n        \"awesome\": {\r\n            type: 'style',\r\n            id: 'awesome',\r\n            href: 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css',\r\n            integrity: 'sha512-SfTiTlX6kk+qitfevl/7LibUOeJWlt9rbyDn92a1DqWOw9vWG2MFoays0sgObmWazO5BQPiFucnnEAjpAB+/Sw=='\r\n        }\r\n    }, \r\n    // URI des images et description des classifications TV et films\r\n    ratings = {\r\n        'D-10': {\r\n            img: 'https://upload.wikimedia.org/wikipedia/commons/thumb/b/bf/Moins10.svg/30px-Moins10.svg.png',\r\n            title: \"Déconseillé au moins de 10 ans\"\r\n        },\r\n        'D-12': {\r\n            img: 'https://upload.wikimedia.org/wikipedia/commons/thumb/b/b5/Moins12.svg/30px-Moins12.svg.png',\r\n            title: 'Déconseillé au moins de 12 ans'\r\n        },\r\n        'D-16': {\r\n            img: 'https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Moins16.svg/30px-Moins16.svg.png',\r\n            title: 'Déconseillé au moins de 16 ans'\r\n        },\r\n        'D-18': {\r\n            img: 'https://upload.wikimedia.org/wikipedia/commons/thumb/2/2d/Moins18.svg/30px-Moins18.svg.png',\r\n            title: 'Ce programme est uniquement réservé aux adultes'\r\n        },\r\n        'TV-Y': {\r\n            img: 'https://upload.wikimedia.org/wikipedia/commons/thumb/2/25/TV-Y_icon.svg/50px-TV-Y_icon.svg.png',\r\n            title: 'Ce programme est évalué comme étant approprié aux enfants'\r\n        },\r\n        'TV-Y7': {\r\n            img: 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/TV-Y7_icon.svg/50px-TV-Y7_icon.svg.png',\r\n            title: 'Ce programme est désigné pour les enfants âgés de 7 ans et plus'\r\n        },\r\n        'TV-G': {\r\n            img: 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5e/TV-G_icon.svg/50px-TV-G_icon.svg.png',\r\n            title: 'La plupart des parents peuvent considérer ce programme comme approprié pour les enfants'\r\n        },\r\n        'TV-PG': {\r\n            img: 'https://upload.wikimedia.org/wikipedia/commons/thumb/9/9a/TV-PG_icon.svg/50px-TV-PG_icon.svg.png',\r\n            title: 'Ce programme contient des éléments que les parents peuvent considérer inappropriés pour les enfants'\r\n        },\r\n        'TV-14': {\r\n            img: 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/TV-14_icon.svg/50px-TV-14_icon.svg.png',\r\n            title: 'Ce programme est déconseillé aux enfants de moins de 14 ans'\r\n        },\r\n        'TV-MA': {\r\n            img: 'https://upload.wikimedia.org/wikipedia/commons/thumb/3/34/TV-MA_icon.svg/50px-TV-MA_icon.svg.png',\r\n            title: 'Ce programme est uniquement réservé aux adultes'\r\n        },\r\n        'G': {\r\n            img: 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/05/RATED_G.svg/30px-RATED_G.svg.png',\r\n            title: 'Tous publics'\r\n        },\r\n        'PG': {\r\n            img: 'https://upload.wikimedia.org/wikipedia/commons/thumb/b/bc/RATED_PG.svg/54px-RATED_PG.svg.png',\r\n            title: 'Accord parental souhaitable'\r\n        },\r\n        'PG-13': {\r\n            img: 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c0/RATED_PG-13.svg/95px-RATED_PG-13.svg.png',\r\n            title: 'Accord parental recommandé, film déconseillé aux moins de 13 ans'\r\n        },\r\n        'R': {\r\n            img: 'https://upload.wikimedia.org/wikipedia/commons/thumb/7/7e/RATED_R.svg/40px-RATED_R.svg.png',\r\n            title: 'Les enfants de moins de 17 ans doivent être accompagnés d\\'un adulte'\r\n        },\r\n        'NC-17': {\r\n            img: 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/50/Nc-17.svg/85px-Nc-17.svg.png',\r\n            title: 'Interdit aux enfants de 17 ans et moins'\r\n        }\r\n    };\r\n    let timer, timerUA, currentUser, cache, dialog, fnLazy;\r\n    /* Initialize the cache */\r\n    cache = new Cache_1.CacheUS();\r\n    /**\r\n     * Paramétrage de la super classe abstraite Base\r\n     */\r\n    Base_1.Base.debug = debug;\r\n    Base_1.Base.cache = cache;\r\n    Base_1.Base.notification = notification;\r\n    Base_1.Base.userIdentified = userIdentified;\r\n    Base_1.Base.token = betaseries_api_user_token;\r\n    Base_1.Base.userKey = betaseries_api_user_key;\r\n    Base_1.Base.userId = betaseries_user_id;\r\n    Base_1.Base.trans = trans;\r\n    Base_1.Base.ratings = ratings;\r\n    Base_1.Base.themoviedb_api_user_key = themoviedb_api_user_key;\r\n    Base_1.Base.serverBaseUrl = serverBaseUrl;\r\n    // On affiche la version du script\r\n    if (debug)\r\n        console.log('UserScript BetaSeries v%s', GM_info.script.version);\r\n    // Ajout des feuilles de styles pour le userscript\r\n    addScriptAndLink(['awesome', 'stylehome']);\r\n    if (typeof lazyLoad === 'undefined') {\r\n        let notLoop = 0;\r\n        let timerLazy = setInterval(function () {\r\n            // Pour eviter une boucle infinie\r\n            if (++notLoop >= 20) {\r\n                clearInterval(timerLazy);\r\n                // Ca ne fera pas le job, mais ça ne déclenchera pas d'erreur\r\n                fnLazy = { init: function () { console.warn('fake lazyLoad'); } };\r\n                return;\r\n            }\r\n            if (typeof lazyLoad !== 'undefined') {\r\n                fnLazy = new lazyLoad({});\r\n                clearInterval(timerLazy);\r\n                timerLazy = null;\r\n            }\r\n        }, 500);\r\n    }\r\n    else {\r\n        fnLazy = new lazyLoad({});\r\n    }\r\n    checkApiVersion();\r\n    // Fonctions appeler pour les pages des series, des films et des episodes\r\n    if (/^\\/(serie|film|episode)\\/.*/.test(url)) {\r\n        // On récupère d'abord la ressource courante pour instancier un objet Media\r\n        getResource(true).then((objRes) => {\r\n            if (debug)\r\n                console.log('objet resource Media(%s)', objRes.constructor.name, objRes);\r\n            if (debug)\r\n                addBtnDev(); // On ajoute le bouton de Dev\r\n            removeAds(); // On retire les pubs\r\n            similarsViewed(objRes); // On s'occupe des ressources similaires\r\n            objRes.decodeTitle(); // On décode le titre de la ressource\r\n            objRes.addNumberVoters(); // On ajoute le nombre de votes à la note\r\n            upgradeSynopsis(); // On améliore le fonctionnement de l'affichage du synopsis\r\n            if (/^\\/serie\\//.test(url)) {\r\n                objRes.addRating(); // On ajoute la classification TV de la ressource courante\r\n                // On ajoute la gestion des épisodes\r\n                waitSeasonsAndEpisodesLoaded(() => upgradeEpisodes(objRes));\r\n            }\r\n        });\r\n    }\r\n    // Fonctions appeler pour la page de gestion des series\r\n    else if (/^\\/membre\\/.*\\/series$/.test(url)) {\r\n        addStatusToGestionSeries();\r\n    }\r\n    // Fonctions appeler sur la page des membres\r\n    else if ((regexUser.test(url) || /^\\/membre\\/[A-Za-z0-9]*\\/amis$/.test(url)) && userIdentified()) {\r\n        if (regexUser.test(url)) {\r\n            // On récupère les infos du membre connecté\r\n            getMember()\r\n                .then(function (member) {\r\n                currentUser = member;\r\n                let login = url.split('/')[2];\r\n                // On ajoute la fonction de comparaison des membres\r\n                if (currentUser && login != currentUser.login) {\r\n                    compareMembers();\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            searchFriends();\r\n        }\r\n    }\r\n    // Fonctions appeler sur les pages des méthodes de l'API\r\n    else if (/^\\/api/.test(url)) {\r\n        if (/\\/methodes/.test(url)) {\r\n            sommaireDevApi();\r\n        }\r\n        else if (/\\/console/.test(url)) {\r\n            updateApiConsole();\r\n        }\r\n    }\r\n    // Fonctions appeler sur les pages des séries\r\n    else if (/^\\/series\\//.test(url)) {\r\n        if (debug)\r\n            console.log('Page des séries');\r\n        waitPagination();\r\n        seriesFilterPays();\r\n        if (/agenda/.test(url)) {\r\n            let countTimer = 0;\r\n            timerUA = setInterval(function () {\r\n                if (++countTimer > 50) {\r\n                    clearInterval(timerUA);\r\n                    notification('Erreur Update Agenda', 'Le timer de chargement a dépassé le temps max autorisé.');\r\n                    return;\r\n                }\r\n                updateAgenda();\r\n            }, 1000);\r\n        }\r\n    }\r\n    // On observe l'espace lié à la recherche de séries ou de films, en haut de page.\r\n    // Afin de modifier quelque peu le résultat, pour pouvoir lire l'intégralité du titre\r\n    const observer = new MutationObserver(mutationsList => {\r\n        let updateTitle = (i, e) => { if (isTruncated(e)) {\r\n            $(e).parents('a').attr('title', $(e).text());\r\n        } };\r\n        for (let mutation of mutationsList) {\r\n            if (mutation.type == 'childList' && mutation.addedNodes.length === 1) {\r\n                let node = mutation.addedNodes[0], $node = $(node);\r\n                if ($node.hasClass('col-md-4')) {\r\n                    $('.mainLink', $node).each(updateTitle);\r\n                }\r\n                else if ($node.hasClass('js-searchResult')) {\r\n                    let title = $('.mainLink', $node).get(0);\r\n                    if (isTruncated(title)) {\r\n                        $node.attr('title', $(title).text());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n    observer.observe(document.getElementById('reactjs-header-search'), { childList: true, subtree: true });\r\n    /**\r\n     * Verifie si l'élément est tronqué, généralement, du texte\r\n     * @params {Object} Objet DOMElement\r\n     * @return {boolean}\r\n     */\r\n    function isTruncated(el) {\r\n        return el.scrollWidth > el.clientWidth;\r\n    }\r\n    /**\r\n     * Verifie si l'utilisateur est connecté\r\n     * @return {boolean}\r\n     */\r\n    function userIdentified() {\r\n        return typeof betaseries_api_user_token !== 'undefined';\r\n    }\r\n    /**\r\n     * Cette fonction vérifie la dernière version de l'API\r\n     */\r\n    function checkApiVersion() {\r\n        fetch(location.origin + '/api/versions').then((resp) => {\r\n            if (!resp.ok) {\r\n                return '';\r\n            }\r\n            return resp.text();\r\n        }).then(html => {\r\n            if (html && html.length > 0) {\r\n                // Convert the HTML string into a document object\r\n                let parser = new DOMParser(), doc = parser.parseFromString(html, 'text/html');\r\n                // $('.maincontent > ul > li > strong').last().text().trim().split(' ')[1]\r\n                const latest = doc.querySelector('.maincontent > ul > li:last-child > strong').textContent.split(' ')[1].trim(), lastF = parseFloat(latest);\r\n                if (!Number.isNaN(lastF) && lastF > parseFloat(Media_1.Media.api.versions.last)) {\r\n                    window.alert(\"L'API possède une nouvelle version: \" + latest);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Permet d'afficher les messages d'erreur liés au script\r\n     *\r\n     * @param {String} title Le titre du message\r\n     * @param {String} text  Le texte du message\r\n     * @return {void}\r\n     */\r\n    function notification(title, text) {\r\n        // GM_notification(details, ondone), GM_notification(text, title, image, onclick)\r\n        let notifContainer = $('.userscript-notifications');\r\n        // On ajoute notre zone de notifications\r\n        if ($('.userscript-notifications').length <= 0) {\r\n            $('#fb-root').after('<div class=\"userscript-notifications\"><h3><span class=\"title\"></span><i class=\"fa fa-times\" aria-hidden=\"true\"></i></h3><p class=\"text\"></p></div>');\r\n            notifContainer = $('.userscript-notifications');\r\n            $('.userscript-notifications .fa-times').click(() => {\r\n                $('.userscript-notifications').slideUp();\r\n            });\r\n        }\r\n        notifContainer.hide();\r\n        $('.userscript-notifications .title').html(title);\r\n        $('.userscript-notifications .text').html(text);\r\n        notifContainer.slideDown().delay(5000).slideUp();\r\n    }\r\n    /**\r\n     * addScriptAndLink - Permet d'ajouter un script ou un link sur la page Web\r\n     *\r\n     * @param  {String|String[]} name Le ou les identifiants des éléments à charger\r\n     * @return {void}\r\n     */\r\n    function addScriptAndLink(name) {\r\n        if (name instanceof Array) {\r\n            if (name.length > 1) {\r\n                for (let n = 0; n < name.length; n++) {\r\n                    addScriptAndLink(name[n]);\r\n                }\r\n                return;\r\n            }\r\n            else {\r\n                name = name[0];\r\n            }\r\n        }\r\n        // On vérifie que le nom est connu\r\n        if (!scriptsAndStyles || !(name in scriptsAndStyles)) {\r\n            throw new Error(`${name} ne fait pas partit des données de scripts ou de styles`);\r\n        }\r\n        let element, data = scriptsAndStyles[name];\r\n        if (data.type === 'script') {\r\n            // https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js\r\n            element = `\r\n                <script src=\"${data.src}\"\r\n                        id=\"${data.id}\"\r\n                        integrity=\"${data.integrity}\"\r\n                        crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\">\r\n                </script>`;\r\n        }\r\n        else if (data.type === 'style') {\r\n            element = `\r\n                <link rel=\"stylesheet\"\r\n                      id=\"${data.id}\"\r\n                      href=\"${data.href}\"\r\n                      integrity=\"${data.integrity}\"\r\n                      crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />`;\r\n        }\r\n        $('head').append(element);\r\n    }\r\n    /**\r\n     * Fonction modifiant le fonctionnement du filtre pays\r\n     * pour permettre d'ajouter plusieurs pays sur la page des séries\r\n     * @return {void}\r\n     */\r\n    function seriesFilterPays() {\r\n        if (url.split('/').pop() == 'agenda')\r\n            return;\r\n        let $input = $('.filter-container-others-countries input');\r\n        // Supprimer l'attribut onclick de l'input other-countries\r\n        $input.removeAttr('onchange');\r\n        $input.on('change', function () {\r\n            let hasSelect = $('option[value=\"' + $input.val() + '\"]'), btnTemp = '<button type=\"button\" class=\"btn-reset btn-btn filter-btn active\" id=\"' +\r\n                hasSelect.attr(\"id\") + '\" onclick=\"searchOption(this);\">' +\r\n                hasSelect.attr(\"value\") + '</button>';\r\n            $('#pays > button').last().after(btnTemp);\r\n            deleteFilterOthersCountries();\r\n            countFilter(\"pays\");\r\n        });\r\n        const baseUrl = generate_route(\"shows\");\r\n        let hash = url.substring(baseUrl.length);\r\n        if (hash.length === 0) {\r\n            return;\r\n        }\r\n        const data = hash.split('/');\r\n        if (!data.find((el) => el.match(/^tri-|sort-/g))) {\r\n            data.push(CONSTANTE_FILTER.tri + \"-\" + CONSTANTE_SORT.popularite);\r\n        }\r\n        for (let i in data) {\r\n            const splitData = data[i].split('-'), filter = splitData.shift(), dataFilter = decodeURIComponent(splitData.join('-'));\r\n            if (filter && dataFilter &&\r\n                (filter === CONSTANTE_FILTER.paspays || filter === CONSTANTE_FILTER.pays)) {\r\n                const hasActive = filter === CONSTANTE_FILTER.pays, hasButton = $(\"#left #pays > button#\" + dataFilter.toUpperCase()), optionExist = $('datalist[id=\"other-countries\"] option[id=\"' + dataFilter.toUpperCase() + '\"]');\r\n                if (hasButton.length <= 0 && optionExist) {\r\n                    let btnTemp = '<button type=\"button\" class=\"btn-reset btn-btn filter-btn' + (hasActive ? ' active' : ' hactive') +\r\n                        '\" id=\"' + dataFilter.toUpperCase() + '\" onclick=\"searchOption(this);\">' +\r\n                        optionExist.attr('value') + '</button>';\r\n                    $('#pays > button').last().after(btnTemp);\r\n                    optionExist.remove();\r\n                    deleteFilterOthersCountries();\r\n                    countFilter(\"pays\");\r\n                }\r\n            }\r\n        }\r\n        function countFilter(target) {\r\n            const current = $('#count_' + target);\r\n            if (current.length > 0) {\r\n                let len = $('#pays > button.hactive, #pays > button.active').length, display = 'none';\r\n                current.text(len);\r\n                if (len >= 1) {\r\n                    display = 'block';\r\n                }\r\n                current.css('display', display);\r\n                hideButtonReset();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Fonction d'ajout d'un paginateur en haut de liste des séries\r\n     * @return {void}\r\n     */\r\n    function waitPagination() {\r\n        let loaded = false;\r\n        // On attend la présence du paginateur\r\n        let timerSeries = setInterval(() => {\r\n            if ($('#pagination-shows').length < 1)\r\n                return;\r\n            clearInterval(timerSeries);\r\n            // On copie colle le paginateur en haut de la liste des séries\r\n            $('#results-shows').prepend($('#pagination-shows').clone(true, true));\r\n            // On observe les modifications dans le noeud du paginateur\r\n            $('#results-shows').on('DOMSubtreeModified', '#pagination-shows', function () {\r\n                if (!loaded) {\r\n                    waitPagination();\r\n                    loaded = true;\r\n                }\r\n            });\r\n        }, 500);\r\n    }\r\n    /**\r\n     * Ajoute des améliorations sur la page de la console de l'API\r\n     */\r\n    function updateApiConsole() {\r\n        // Listener sur le btn nouveau paramètre\r\n        $('div.form-group button.btn-btn.btn--blue').prop('onclick', null).off('click').click((e, key) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            if (debug)\r\n                console.log('nouveau parametre handler', key);\r\n            // On ajoute une nouvelle ligne de paramètre\r\n            newApiParameter();\r\n            // On insère la clé du paramètre, si elle est présente\r\n            if (key) {\r\n                $('input.name:last').val(key);\r\n                $('input.form-control:last').focus();\r\n            }\r\n            addRemoveParamToConsole();\r\n        });\r\n        // Listener sur la liste des méthodes\r\n        $('#method').on('change', () => {\r\n            // On supprime tous les paramètres existants\r\n            $('#api-params .remove').remove();\r\n            // En attente de la documentation de l'API\r\n            timer = setInterval(() => {\r\n                if ($('#doc code').length <= 0)\r\n                    return;\r\n                clearInterval(timer); // On supprime le timer\r\n                let paramsDoc = $('#doc > ul > li > code');\r\n                if (debug)\r\n                    console.log('paramsDoc', paramsDoc);\r\n                paramsDoc.css('cursor', 'pointer');\r\n                // On ajoute la clé du paramètre dans une nouvelle ligne de paramètre\r\n                paramsDoc.click((e) => {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    $('div.form-group button.btn-btn.btn--blue').trigger('click', [$(e.currentTarget).text().trim()]);\r\n                });\r\n            }, 500);\r\n        });\r\n        // Ajoute un cadenas vérouillé au paramètre 'Version' non-modifiable\r\n        $('.api-params:first').append('<i class=\"fa fa-lock fa-2x\" style=\"margin-left: 10px;vertical-align:middle;cursor:not-allowed;\" aria-hidden=\"true\"></i>');\r\n        addRemoveParamToConsole();\r\n        addToggleShowResult();\r\n        /**\r\n         * On ajoute un bouton pour supprimer la ligne d'un paramètre\r\n         */\r\n        function addRemoveParamToConsole() {\r\n            let elts = $('.api-params:not(.remove):not(.lock):not(:first)');\r\n            elts\r\n                .append('<i class=\"remove-input fa fa-minus-circle fa-2x\" style=\"margin-left: 10px;vertical-align:middle;cursor:pointer;\" aria-hidden=\"true\"></i>')\r\n                .append('<i class=\"lock-param fa fa-unlock fa-2x\" style=\"margin-left: 10px;vertical-align:middle;cursor:pointer;\" aria-hidden=\"true\"></i>')\r\n                .addClass('remove');\r\n            $('.remove-input').click((e) => {\r\n                $(e.currentTarget).parent('.api-params').remove();\r\n            });\r\n            $('.lock-param', elts).click((e) => {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                let self = $(e.currentTarget);\r\n                if (debug)\r\n                    console.log('lock-param', self, self.hasClass('fa-unlock'));\r\n                if (self.hasClass('fa-unlock')) {\r\n                    self.removeClass('fa-unlock').addClass('fa-lock');\r\n                    self.parent('.api-params').removeClass('remove').addClass('lock');\r\n                }\r\n                else {\r\n                    self.removeClass('fa-lock').addClass('fa-unlock');\r\n                    self.parent('.api-params').addClass('remove').removeClass('lock');\r\n                }\r\n            });\r\n        }\r\n        function addToggleShowResult() {\r\n            let $result = $('#result');\r\n            // On ajoute un titre pour la section de résultat de la requête\r\n            $result.before('<h2>Résultat de la requête <span class=\"toggle\" style=\"margin-left:10px;\"><i class=\"fa fa-chevron-circle-down\" aria-hidden=\"true\"></i></span></h2>');\r\n            $('.toggle').click(() => {\r\n                // On réalise un toggle sur la section de résultat et on modifie l'icône du chevron\r\n                $result.toggle(400, () => {\r\n                    if ($result.is(':hidden')) {\r\n                        $('.toggle i').removeClass('fa-chevron-circle-up').addClass('fa-chevron-circle-down');\r\n                    }\r\n                    else {\r\n                        $('.toggle i').removeClass('fa-chevron-circle-down').addClass('fa-chevron-circle-up');\r\n                    }\r\n                });\r\n            });\r\n            // On modifie le sens du chevron lors du lancement d'une requête\r\n            $('button.is-full').click(() => {\r\n                $('.toggle i').removeClass('fa-chevron-circle-down').addClass('fa-chevron-circle-up');\r\n            });\r\n        }\r\n    }\r\n    /*\r\n     * Ajoute un sommaire sur les pages de documentation des méthodes de l'API\r\n     * Le sommaire est constitué des liens vers les fonctions des méthodes.\r\n     */\r\n    function sommaireDevApi() {\r\n        if (debug)\r\n            console.log('build sommaire');\r\n        let titles = $('.maincontent h2'), methods = {};\r\n        // Ajout du style CSS pour les tables\r\n        addScriptAndLink('tablecss');\r\n        /**\r\n         * Construit une cellule de table HTML pour une methode\r\n         *\r\n         * @param  {String} verb Le verbe HTTP utilisé par la fonction\r\n         * @param  {String} key  L'identifiant de la fonction\r\n         * @return {String}\r\n         */\r\n        function buildCell(verb, key) {\r\n            let cell = '<td>';\r\n            if (verb in methods[key]) {\r\n                cell += `<i data-id=\"${methods[key][verb].id}\" \r\n                            class=\"linkSommaire fa fa-check fa-2x\" \r\n                            title=\"${methods[key][verb].title}\"></i>`;\r\n            }\r\n            return cell + '</td>';\r\n        }\r\n        /**\r\n         * Construit une ligne de table HTML pour une fonction\r\n         *\r\n         * @param  {String} key L'identifiant de la fonction\r\n         * @return {String}     La ligne HTML\r\n         */\r\n        function buildRow(key) {\r\n            let row = `<tr><th scope=\"row\" class=\"fonction\">${methods[key].title}</th>`;\r\n            row += buildCell('GET', key);\r\n            row += buildCell('POST', key);\r\n            row += buildCell('PUT', key);\r\n            row += buildCell('DELETE', key);\r\n            return row + '</tr>';\r\n        }\r\n        /**\r\n         * Fabrique la table HTML du sommaire\r\n         * @return {Object} L'objet jQuery de la table HTML\r\n         */\r\n        function buildTable() {\r\n            let $table = $(`\r\n                <div id=\"sommaire\" class=\"table-responsive\" style=\"display:none;\">\r\n                    <table class=\"table table-dark table-striped table-bordered\">\r\n                        <thead class=\"thead-dark\">\r\n                            <tr>\r\n                                <th colspan=\"5\" scope=\"col\" class=\"col-lg-12 liTitle\">Sommaire</th>\r\n                            </tr>\r\n                            <tr>\r\n                                <th scope=\"col\" class=\"col-lg-3\">Fonction</th>\r\n                                <th scope=\"col\" class=\"col-lg-2\">GET</th>\r\n                                <th scope=\"col\" class=\"col-lg-2\">POST</th>\r\n                                <th scope=\"col\" class=\"col-lg-2\">PUT</th>\r\n                                <th scope=\"col\" class=\"col-lg-2\">DELETE</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody></tbody>\r\n                    </table>\r\n                </div>`), $tbody = $table.find('tbody');\r\n            for (let key in methods) {\r\n                $tbody.append(buildRow(key));\r\n            }\r\n            return $table;\r\n        }\r\n        for (let t = 0; t < titles.length; t++) {\r\n            // ajouter les ID aux titres des methodes, ainsi qu'un chevron pour renvoyer au sommaire\r\n            let $title = $(titles.get(t)), id = $title.text().trim().toLowerCase().replace(/ /, '_').replace(/\\//, '-'), txt = $title.text().trim().split(' ')[1], desc = $title.next('p').text(), key = txt.toLowerCase().replace(/\\//, ''), verb = $title.text().trim().split(' ')[0].toUpperCase();\r\n            $title.attr('id', id);\r\n            $title.append('<i class=\"fa fa-chevron-circle-up\" aria-hidden=\"true\" title=\"Retour au sommaire\"></i>');\r\n            if (!(key in methods))\r\n                methods[key] = { title: txt };\r\n            methods[key][verb] = { id: id, title: desc };\r\n        }\r\n        // Construire un sommaire des fonctions\r\n        //if (debug) console.log('methods', methods);\r\n        $('.maincontent h1').after(buildTable());\r\n        $('#sommaire').fadeIn();\r\n        $('.linkSommaire').click((e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            $('#' + $(e.currentTarget).data('id')).get(0).scrollIntoView(true);\r\n        });\r\n        $('.fa-chevron-circle-up').click(function (e) {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            document.getElementById('sommaire').scrollIntoView(true);\r\n        });\r\n    }\r\n    /**\r\n     * Ajoute un bouton pour le dev pour afficher les données de la ressource\r\n     * dans une modal\r\n     */\r\n    function addBtnDev() {\r\n        const btnHTML = '<div class=\"blockInformations__action\"><button class=\"btn-reset btn-transparent\" type=\"button\" style=\"height:44px;width:64px;\"><i class=\"fa fa-wrench\" aria-hidden=\"true\" style=\"font-size:1.5em;\"></i></button><div class=\"label\">Dev</div></div>', dialogHTML = `\r\n              <style>\r\n                .dialog-container .close {\r\n                  float: right;\r\n                  font-size: 1.5rem;\r\n                  font-weight: 700;\r\n                  line-height: 1;\r\n                  color: #fff;\r\n                  text-shadow: 0 1px 0 #fff;\r\n                  opacity: .5;\r\n                  margin-right: 20px;\r\n                }\r\n                .dialog-container .close:hover {color: #000;text-decoration: none;}\r\n                .dialog-container .close:not(:disabled):hover, .close:not(:disabled):focus {opacity: .75;}\r\n                .dialog-container button.close {padding: 0;background-color: transparent;border: 0;}\r\n                .dialog-container .counter {font-size:0.8em;}\r\n              </style>\r\n                <div\r\n                  class=\"dialog dialog-container table-dark\"\r\n                  id=\"dialog-resource\"\r\n                  aria-labelledby=\"dialog-resource-title\"\r\n                  style=\"display:none;\"\r\n                >\r\n                  <div class=\"dialog-overlay\"></div>\r\n                  <div class=\"dialog-content\" role=\"document\" style=\"width: 80%;\">\r\n                    <h1 id=\"dialog-resource-title\">Données de la ressource\r\n                        <span class=\"counter\"></span>\r\n                        <button type = \"button\"\r\n                                class = \"close\"\r\n                                aria-label = \"Close\"\r\n                                title = \"Fermer la boîte de dialogue\">\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </h1>\r\n                    <div class=\"data-resource content\"></div>\r\n                  </div>\r\n                </div>`;\r\n        $('.blockInformations__actions').append(btnHTML);\r\n        $('body').append(dialogHTML);\r\n        let $dialog = $('#dialog-resource');\r\n        const html = document.documentElement;\r\n        const onShow = function () {\r\n            html.style.overflowY = 'hidden';\r\n            $('#dialog-resource')\r\n                .css('z-index', '1005')\r\n                .css('overflow', 'scroll');\r\n        };\r\n        const onHide = function () {\r\n            html.style.overflowY = '';\r\n            $('#dialog-resource')\r\n                .css('z-index', '0')\r\n                .css('overflow', 'none');\r\n        };\r\n        $('.blockInformations__actions .fa-wrench').parent().click((e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            let type = getApiResource(location.pathname.split('/')[1]), // Indique de quel type de ressource il s'agit\r\n            $dataRes = $('#dialog-resource .data-resource'); // DOMElement contenant le rendu JSON de la ressource\r\n            getResourceData().then(function (data) {\r\n                // if (debug) console.log('addBtnDev promise return', data);\r\n                $dataRes.empty().append(renderjson.set_show_to_level(2)(data[type.singular]));\r\n                $('#dialog-resource-title span.counter').empty().text('(' + Media_1.Media.counter + ' appels API)');\r\n                $dialog.show(400, onShow);\r\n            }, (err) => {\r\n                notification('Erreur de récupération de la ressource', 'addBtnDev: ' + err);\r\n            });\r\n        });\r\n        $('.dialog button.close').click(function (e) {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            $dialog.hide(400, onHide);\r\n        });\r\n    }\r\n    /**\r\n     * Cette fonction permet de retourner la ressource principale sous forme d'objet\r\n     * @param  {boolean} [nocache=false] Flag indiquant si il faut utiliser les données en cache\r\n     * @param  {number}  [id=null]       Identifiant de la ressource\r\n     * @return {Promise<Base>}\r\n     */\r\n    function getResource(nocache = false, id = null) {\r\n        const type = getApiResource(location.pathname.split('/')[1]), // Indique de quel type de ressource il s'agit\r\n        fonction = type.singular === 'show' || type.singular === 'episode' ? 'display' : 'movie'; // Indique la fonction à appeler en fonction de la ressource\r\n        id = (id === null) ? getResourceId() : id;\r\n        if (debug)\r\n            console.log('getResource{id: %d, nocache: %s, type: %s}', id, ((nocache) ? 'true' : 'false'), type.singular);\r\n        return new Promise((resolve, reject) => {\r\n            Base_1.Base.callApi('GET', type.plural, fonction, { 'id': id }, nocache)\r\n                .then(data => {\r\n                resolve(new type.class(data[type.singular]));\r\n            }, err => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Cette fonction permet de récupérer les données API de la ressource principale\r\n     * @param  {boolean} [nocache=true]  Flag indiquant si il faut utiliser les données en cache\r\n     * @param  {number}  [id=null]       Identifiant de la ressource\r\n     * @return {Promise<Object>}\r\n     */\r\n    function getResourceData(nocache = true, id = null) {\r\n        const type = getApiResource(location.pathname.split('/')[1]), // Indique de quel type de ressource il s'agit\r\n        fonction = type.singular == 'show' || type.singular == 'episode' ? 'display' : 'movie'; // Indique la fonction à appeler en fonction de la ressource\r\n        id = (id === null) ? getResourceId() : id;\r\n        if (debug)\r\n            console.log('getResourceData{id: %d, nocache: %s, type: %s}', id, ((nocache) ? 'true' : 'false'), type.singular);\r\n        return Base_1.Base.callApi('GET', type.plural, fonction, { 'id': id }, nocache);\r\n    }\r\n    /**\r\n     * Retourne la ressource associée au type de page\r\n     *\r\n     * @param  {String} pageType    Le type de page consultée\r\n     * @return {Object} Retourne le nom de la ressource API au singulier et au pluriel\r\n     */\r\n    function getApiResource(pageType) {\r\n        let methods = {\r\n            'serie': { singular: 'show', plural: 'shows', \"class\": Show_1.Show },\r\n            'film': { singular: 'movie', plural: 'movies', \"class\": Movie_1.Movie },\r\n            'episode': { singular: 'episode', plural: 'episodes', \"class\": Episode_1.Episode }\r\n        };\r\n        if (pageType in methods) {\r\n            return methods[pageType];\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Retourne l'identifiant de la ressource de la page\r\n     * @return {number} L'identifiant de la ressource\r\n     */\r\n    function getResourceId() {\r\n        const type = getApiResource(url.split('/')[1]), // Le type de ressource\r\n        eltActions = $(`#reactjs-${type.singular}-actions`); // Le noeud contenant l'ID\r\n        return (eltActions.length === 1) ? parseInt(eltActions.data(`${type.singular}-id`), 10) : 0;\r\n    }\r\n    /**\r\n     * Retourne les infos d'un membre\r\n     *\r\n     * @param {Number}   id    Identifiant du membre (par défaut: le membre connecté)\r\n     * @return {Promise} Le membre\r\n     */\r\n    function getMember(id = null) {\r\n        // On vérifie que l'utilisateur est connecté et que la clé d'API est renseignée\r\n        if (!userIdentified() || betaseries_api_user_key === '')\r\n            return;\r\n        let args = {};\r\n        if (id)\r\n            args.id = id;\r\n        return new Promise((resolve) => {\r\n            Base_1.Base.callApi('GET', 'members', 'infos', args)\r\n                .then(data => {\r\n                // On retourne les infos du membre\r\n                resolve(data.member);\r\n            }, (err) => {\r\n                notification('Erreur de récupération d\\'un membre', 'getMember: ' + err);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Compare le membre courant avec un autre membre\r\n     */\r\n    function compareMembers() {\r\n        let id = parseInt($('#temps').data('loginid'), 10);\r\n        getMember(id).\r\n            then(function (member) {\r\n            let otherMember = member;\r\n            const dialogHTML = `\r\n                <div\r\n                  class=\"dialog dialog-container table-dark\"\r\n                  id=\"dialog-compare\"\r\n                  aria-hidden=\"true\"\r\n                  aria-labelledby=\"dialog-compare-title\"\r\n                >\r\n                  <div class=\"dialog-overlay\" data-a11y-dialog-hide></div>\r\n                  <div class=\"dialog-content\" role=\"document\">\r\n                    <button\r\n                      data-a11y-dialog-hide\r\n                      class=\"dialog-close\"\r\n                      aria-label=\"Fermer cette boîte de dialogue\"\r\n                    >\r\n                      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n                    </button>\r\n\r\n                    <h1 id=\"dialog-compare-title\">Comparaison des membres</h1>\r\n\r\n                    <div id=\"compare\" class=\"table-responsive-lg\">\r\n                      <table class=\"table table-dark table-striped\">\r\n                        <thead>\r\n                          <tr>\r\n                            <th scope=\"col\" class=\"col-lg-5\">Infos</th>\r\n                            <th scope=\"col\" class=\"col-lg-3\">Vous</th>\r\n                            <th scope=\"col\" class=\"other-user col-lg-3\"></th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n                  </div>\r\n                </div>`, trads = {\r\n                \"id\": 'ID',\r\n                \"login\": \"Login\",\r\n                \"xp\": 'Pts d\\'expérience',\r\n                \"subscription\": 'Année d\\'inscription',\r\n                stats: {\r\n                    \"friends\": 'Amis',\r\n                    \"shows\": 'Séries',\r\n                    \"seasons\": 'Saisons',\r\n                    \"episodes\": 'Episodes',\r\n                    \"comments\": 'Commentaires',\r\n                    \"progress\": 'Progression de visionnage',\r\n                    \"episodes_to_watch\": 'Nb d\\'épisodes à regarder',\r\n                    \"time_on_tv\": 'Temps devant la TV',\r\n                    \"time_to_spend\": 'Temps restant devant des séries à regarder',\r\n                    \"movies\": 'Nb de films',\r\n                    \"badges\": 'Nb de badges',\r\n                    \"member_since_days\": 'Membre depuis (jours)',\r\n                    \"friends_of_friends\": 'Les amis du réseau étendu',\r\n                    \"episodes_per_month\": 'Nb d\\'épisodes par mois',\r\n                    \"favorite_day\": 'Jour favori',\r\n                    \"five_stars_percent\": '% de votes 5 étoiles',\r\n                    \"four-five_stars_total\": 'Nb de votes 4 ou 5 étoiles',\r\n                    \"streak_days\": 'Nb de jours consécutifs à regarder des épisodes',\r\n                    \"favorite_genre\": 'Genre favori',\r\n                    \"written_words\": 'Nb de mots écrits sur BetaSeries',\r\n                    \"without_days\": 'Nb jours d\\'abstinence',\r\n                    \"shows_finished\": 'Nb de séries terminées',\r\n                    \"shows_current\": 'Nb de séries en cours',\r\n                    \"shows_to_watch\": 'Nb de séries à voir',\r\n                    \"shows_abandoned\": 'Nb de séries abandonnées',\r\n                    \"movies_to_watch\": 'Nb de films à voir',\r\n                    \"time_on_movies\": 'Temps devant les films',\r\n                    \"time_to_spend_movies\": 'Temps restant devant les films à regarder'\r\n                }\r\n            };\r\n            addScriptAndLink('tablecss');\r\n            $('body').append(dialogHTML);\r\n            //if (debug) console.log(currentUser, otherMember, trads);\r\n            for (const [key, value] of Object.entries(trads)) {\r\n                if (typeof value == 'object') {\r\n                    for (const [subkey, subvalue] of Object.entries(trads[key])) {\r\n                        if (/time/.test(subkey)) {\r\n                            currentUser[key][subkey] = humanizeDuration((currentUser[key][subkey] * 60 * 1000), { language: currentUser.locale });\r\n                            otherMember[key][subkey] = humanizeDuration((otherMember[key][subkey] * 60 * 1000), { language: currentUser.locale });\r\n                        }\r\n                        $('#dialog-compare table tbody').append('<tr><td>' + subvalue + '</td><td>' + currentUser[key][subkey] + '</td><td>' + otherMember[key][subkey] + '</td></tr>');\r\n                    }\r\n                }\r\n                else {\r\n                    $('#dialog-compare table tbody').append('<tr><td>' + value + '</td><td>' + currentUser[key] + '</td><td>' + otherMember[key] + '</td></tr>');\r\n                }\r\n            }\r\n            $('.other-user').append(otherMember.login);\r\n            const dialog = new A11yDialog(document.querySelector('#dialog-compare')), html = document.documentElement;\r\n            $('#stats_container h1')\r\n                .css('display', 'inline-block')\r\n                .after('<button type=\"button\" class=\"button blue\" data-a11y-dialog-show=\"dialog-compare\">Se comparer à ce membre</button>');\r\n            $('button.button.blue').click(function (e) {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                dialog.show();\r\n            });\r\n            dialog\r\n                .on('show', function () {\r\n                html.style.overflowY = 'hidden';\r\n                $('#dialog-compare').css('z-index', '1005').css('overflow', 'scroll');\r\n                $('.dialog-close').click(function (e) {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    dialog.hide();\r\n                });\r\n            })\r\n                .on('hide', function () {\r\n                html.style.overflowY = '';\r\n                $('#dialog-compare').css('z-index', '0').css('overflow', 'none');\r\n                $('.dialog-close').off('click');\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Ajoute un champ de recherche sur la page des amis d'un membre\r\n     * @return {void}\r\n     */\r\n    function searchFriends() {\r\n        // Ajouter un champ de recherche\r\n        $('.maincontent h1').append('<input id=\"searchFriends\" placeholder=\"Recherche d\\'amis\" list=\"friendsdata\" autocomplete=\"off\"/>' +\r\n            '<i class=\"fa fa-times clearSearch\" aria-hidden=\"true\" style=\"display:none;\" title=\"Effacer la recherche\"></i>');\r\n        // Recuperer les identifiants et liens des membres\r\n        let $links = $('.timeline-item .infos a'), objFriends = {}, idFriends = [], datalist = '<datalist id=\"friendsdata\">';\r\n        // On recupere les infos des amis\r\n        for (let i = 0; i < $links.length; i++) {\r\n            let elt = $($links.get(i)), text = elt.text().trim();\r\n            objFriends[text.toLowerCase()] = { link: elt.attr('href'), name: text };\r\n        }\r\n        // On stocke les identifiants dans un tableau que l'on tri\r\n        idFriends = Object.keys(objFriends);\r\n        idFriends.sort();\r\n        // On build la liste des amis pour alimenter le champ de recherche\r\n        for (let i = 0; i < idFriends.length; i++) {\r\n            datalist += '<option value=\"' + objFriends[idFriends[i]].name + '\"/>';\r\n        }\r\n        $('.maincontent').append(datalist + '</datalist>');\r\n        // On affiche toute la liste des amis\r\n        viewMoreFriends();\r\n        const $inpSearchFriends = $('#searchFriends');\r\n        $inpSearchFriends.on('keypress', () => {\r\n            if ($inpSearchFriends.val().toString().trim().length > 0) {\r\n                $('.clearSearch').show();\r\n            }\r\n        });\r\n        $inpSearchFriends.on('input', () => {\r\n            let val = $inpSearchFriends.val().toString().trim().toLowerCase();\r\n            if (debug)\r\n                console.log('Search Friends: ' + val, idFriends.indexOf(val), objFriends[val]);\r\n            if (val === '' || idFriends.indexOf(val) === -1) {\r\n                $('.timeline-item').show();\r\n                if (val === '') {\r\n                    $('.clearSearch').hide();\r\n                }\r\n                return;\r\n            }\r\n            $('.clearSearch').show();\r\n            $('.timeline-item').hide();\r\n            if (debug)\r\n                console.log('Item: ', $('.timeline-item .infos a[href=\"' + objFriends[val].link + '\"]'));\r\n            $('.timeline-item .infos a[href=\"' + objFriends[val].link + '\"]').parents('.timeline-item').show();\r\n        });\r\n        $('.clearSearch').click(() => {\r\n            $('#searchFriends').val('');\r\n            $('.timeline-item').show();\r\n            $('.clearSearch').hide();\r\n        });\r\n    }\r\n    /**\r\n     * Masque les pubs\r\n     */\r\n    function removeAds() {\r\n        setTimeout(function () {\r\n            $('script[src*=\"securepubads\"]').remove();\r\n            $('script[src*=\"static-od.com\"]').remove();\r\n            $('script[src*=\"ad.doubleclick.net\"]').remove();\r\n            $('script[src*=\"sddan.com\"]').remove();\r\n        }, 500);\r\n        $('.parent-ad-desktop').attr('style', 'display: none !important');\r\n        setInterval(function () {\r\n            let $frame;\r\n            $('iframe[name!=\"userscript\"]').each((i, elt) => {\r\n                $frame = $(elt);\r\n                if (!$frame.hasClass('embed-responsive-item')) {\r\n                    $frame.remove();\r\n                }\r\n            });\r\n        }, 1000);\r\n        $('.blockPartner').attr('style', 'display: none !important');\r\n        //$('.breadcrumb').hide();\r\n    }\r\n    /**\r\n     * Améliore l'affichage de la description de la ressource\r\n     *\r\n     * @return {void}\r\n     */\r\n    function upgradeSynopsis() {\r\n        let $span = $('.blockInformations__synopsis span'), $btnMore = $('a.js-show-fulltext');\r\n        if ($btnMore.length <= 0) {\r\n            return;\r\n        }\r\n        // On ajoute le bouton Moins et son event click\r\n        $span.append('<button role=\"button\" class=\"u-colorWhiteOpacity05 js-show-truncatetext textTransformUpperCase cursorPointer\"></button>');\r\n        const $btnLess = $('button.js-show-truncatetext');\r\n        $btnLess.click((e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            if ($span.hasClass('sr-only'))\r\n                return;\r\n            // Toggle display synopsis\r\n            $btnMore.show();\r\n            $span.addClass('sr-only');\r\n        });\r\n        // On remplace le lien Plus par un bouton\r\n        $btnMore.replaceWith('<button role=\"button\" class=\"u-colorWhiteOpacity05 js-show-fulltext textTransformUpperCase cursorPointer\"></button>');\r\n        $btnMore = $('button.js-show-fulltext');\r\n        $btnMore.on('click', (e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            if (!$span.hasClass('sr-only'))\r\n                return;\r\n            $btnMore.hide();\r\n            $span.removeClass('sr-only');\r\n        });\r\n    }\r\n    /**\r\n     * Patiente le temps du chargment des saisons et des épisodes\r\n     * @param  {Function} cb Fonction de callback en cas de success\r\n     * @param  {Function} cb Fonction de callback en cas d'error\r\n     * @return {void}\r\n     */\r\n    function waitSeasonsAndEpisodesLoaded(successCb, errorCb = Base_1.Base.noop) {\r\n        let waitEpisodes = 0;\r\n        // On ajoute un timer interval en attendant que les saisons et les épisodes soient chargés\r\n        timer = setInterval(function () {\r\n            // On évite une boucle infinie\r\n            if (++waitEpisodes >= 100) {\r\n                clearInterval(timer);\r\n                notification('Wait Episodes List', 'Les vignettes des saisons et des épisodes n\\'ont pas été trouvées.');\r\n                errorCb('timeout');\r\n                return;\r\n            }\r\n            let len = parseInt($('#seasons .slide--current .slide__infos').text(), 10), $episodes = $('#episodes .slide_flex');\r\n            // On vérifie que les saisons et les episodes soient chargés sur la page\r\n            if ($episodes.length <= 0 || $episodes.length < len) {\r\n                if (debug)\r\n                    console.log('waitSeasonsAndEpisodesLoaded: En attente du chargement des vignettes');\r\n                return;\r\n            }\r\n            if (debug)\r\n                console.log('waitSeasonsAndEpisodesLoaded, nbVignettes (%d, %d)', $episodes.length, len);\r\n            clearInterval(timer);\r\n            successCb();\r\n        }, 500);\r\n    }\r\n    /**\r\n     * Gère la mise à jour auto des épisodes de la saison courante\r\n     * @param  {Show} show L'objet de type Show\r\n     * @return {void}\r\n     */\r\n    function updateAutoEpisodeList(show) {\r\n        let objUpAuto = UpdateAuto_1.UpdateAuto.getInstance(show);\r\n        /**\r\n         * Fonction retournant le contenu de la Popup des options update\r\n         * de la liste des épisodes\r\n         * @return {String} Contenu HTML de la PopUp des options update\r\n         */\r\n        const contentUp = function () {\r\n            const intervals = UpdateAuto_1.UpdateAuto.intervals;\r\n            let contentUpdate = `\r\n                    <style>\r\n                        .alert {\r\n                          position: relative;\r\n                          padding: 0.75rem 1.25rem;\r\n                          margin-bottom: 1rem;\r\n                          border: 1px solid transparent;\r\n                          border-radius: 0.25rem;\r\n                        }\r\n                        .alert-info {\r\n                          color: #0c5460;\r\n                          background-color: #d1ecf1;\r\n                          border-color: #bee5eb;\r\n                        }\r\n                        .alert-warning {\r\n                          color: #856404;\r\n                          background-color: #fff3cd;\r\n                          border-color: #ffeeba;\r\n                        }\r\n                    </style>\r\n                    <form id=\"optionsUpdateEpisodeList\">\r\n                      <div class=\"form-group form-check\">\r\n                        <input type=\"checkbox\"\r\n                               class=\"form-check-input\"\r\n                               id=\"updateEpisodeListAuto\"\r\n                               ${objUpAuto.auto ? ' checked=\"true\"' : ''}\r\n                               ${!show.in_account ? ' disabled=\"true\"' : ''}>\r\n                        <label class=\"form-check-label\"\r\n                               for=\"updateEpisodeListAuto\">Activer la mise à jour auto des épisodes</label>\r\n                      </div>\r\n                      <div class=\"form-group\">\r\n                        <label for=\"updateEpisodeListTime\">Fréquence de mise à jour</label>\r\n                        <select class=\"form-control\"\r\n                                id=\"updateEpisodeListTime\"\r\n                                ${!show.in_account ? ' disabled=\"true\"' : ''}>`;\r\n            for (let i = 0; i < intervals.length; i++) {\r\n                contentUpdate += `<option value=\"${intervals[i].val}\"\r\n                    ${objUpAuto.interval === intervals[i].val ? 'selected=\"true\"' : ''}>\r\n                    ${intervals[i].label}</option>`;\r\n            }\r\n            contentUpdate += `</select></div>\r\n                    ${!show.in_account ? '<div class=\"form-group\"><p class=\"alert alert-warning\">Veuillez ajouter la série avant de pouvoir activer cette fonctionnalité.</p></div>' : ''}\r\n                    <button type=\"submit\" class=\"btn btn-primary\"${!show.in_account ? ' disabled=\"true\"' : ''}>Sauver</button>\r\n                    <button type=\"button\" class=\"close btn btn-danger\">Annuler</button>\r\n                </form>`;\r\n            return contentUpdate;\r\n        };\r\n        /**\r\n         * Fonction retournant le titre de la Popup des options pour l'update\r\n         * de la liste des épisodes de la saison courante\r\n         * @param  {UpdateAuto} objUpAuto\r\n         * @return {String} Contenu HTML du titre de la PopUp des options update\r\n         */\r\n        const titlePopup = function (objUpAuto) {\r\n            const className = (objUpAuto && objUpAuto.status) ? 'success' : 'secondary', label = (objUpAuto && objUpAuto.status) ? 'running' : 'not running', help = \"Cette fonctionnalité permet de mettre à jour les épisodes de la saison courante, à une fréquence choisie.\";\r\n            return `<style>\r\n                        .optionsUpAuto .close {\r\n                            position: absolute;\r\n                            right: 5px;\r\n                            border: none;\r\n                            background: transparent;\r\n                            font-size: 1.5em;\r\n                            top: 0;\r\n                        }\r\n                        .optionsUpAuto .close:hover {border: none;outline: none;}\r\n                        .optionsUpAuto .close:focus {border: none;outline: none;}\r\n                    </style>\r\n                    <div class=\"optionsUpAuto\" style=\"color:#000;\">Options de mise à jour\r\n                      <span class=\"badge badge-pill badge-${className}\"${objUpAuto.status ? 'title=\"Arrêter la tâche en cours\"' : ''}>${label}</span>\r\n                      <button type=\"button\" class=\"close\" aria-label=\"Close\" title=\"Fermer\">\r\n                        <span aria-hidden=\"true\">&times;</span>\r\n                      </button>\r\n                      <i class=\"fa fa-question-circle\" style=\"color:blue;margin-left:5px;\" aria-hidden=\"true\" title=\"${help}\"></i>\r\n                    </div>`;\r\n        };\r\n        // On relance l'update auto des épisodes au chargement de la page\r\n        if (show.in_account && show.user.remaining > 0 && objUpAuto.status) {\r\n            objUpAuto.launch();\r\n        }\r\n        else if (objUpAuto.status) {\r\n            objUpAuto.stop();\r\n        }\r\n        let notLoop = 0;\r\n        let intTime = setInterval(function () {\r\n            if (++notLoop >= 20) {\r\n                clearInterval(intTime);\r\n                return;\r\n            }\r\n            if (typeof bootstrap === 'undefined' || typeof bootstrap.Popover !== 'function') {\r\n                return;\r\n            }\r\n            else\r\n                clearInterval(intTime);\r\n            if (debug)\r\n                console.log('Loading popover updateEpisodes');\r\n            $('#updateEpisodeList .updateElement').popover({\r\n                container: $('#updateEpisodeList'),\r\n                // delay: { \"show\": 500, \"hide\": 100 },\r\n                html: true,\r\n                content: contentUp,\r\n                placement: 'right',\r\n                title: ' ',\r\n                trigger: 'manual',\r\n                boundary: 'window'\r\n            });\r\n            let timeoutHover = null;\r\n            $('#updateEpisodeList .updateElement').hover(\r\n            // In\r\n            function (e) {\r\n                e.stopPropagation();\r\n                timeoutHover = setTimeout(function () {\r\n                    $('#updateEpisodeList .updateElement').popover('show');\r\n                }, 500);\r\n            }, \r\n            // Out\r\n            function (e) {\r\n                e.stopPropagation();\r\n                clearTimeout(timeoutHover);\r\n            });\r\n            // On ferme et désactive les autres popups lorsque celle des options est ouverte\r\n            $('#updateEpisodeList .updateElement').on('show.bs.popover', function () {\r\n                const $updateElement = $('#episodes .slide__image');\r\n                $updateElement.popover('hide');\r\n                $updateElement.popover('disable');\r\n            });\r\n            // On réactive les autres popus lorsque celle des options se ferme\r\n            // Et on supprime les listeners de la popup\r\n            $('#updateEpisodeList .updateElement').on('hide.bs.popover', function () {\r\n                $('#episodes .slide__image').popover('enable');\r\n                $('.optionsUpAuto .badge').css('cursor', 'initial').off('click');\r\n                $('#updateEpisodeList button.close').off('click');\r\n                $('#optionsUpdateEpisodeList button.btn-primary').off('click');\r\n            });\r\n            $('#updateEpisodeList .updateElement').on('shown.bs.popover', function () {\r\n                $('#updateEpisodeList .popover-header').html(titlePopup(objUpAuto));\r\n                if (objUpAuto.status) {\r\n                    $('.optionsUpAuto .badge').css('cursor', 'pointer').click(e => {\r\n                        e.stopPropagation();\r\n                        e.preventDefault();\r\n                        const $badge = $(e.currentTarget);\r\n                        if ($badge.hasClass('badge-success')) {\r\n                            // On arrête la tâche d'update auto\r\n                            objUpAuto.stop();\r\n                        }\r\n                    });\r\n                }\r\n                $('#updateEpisodeList button.close').click((e) => {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    $('#updateEpisodeList .updateElement').popover('hide');\r\n                });\r\n                $('#optionsUpdateEpisodeList button.btn-primary').click((e) => {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    let checkAuto = $('#updateEpisodeListAuto').is(':checked'), intervalAuto = parseInt($('#updateEpisodeListTime').val().toString(), 10);\r\n                    if (objUpAuto.auto !== checkAuto)\r\n                        objUpAuto.auto = checkAuto;\r\n                    if (objUpAuto.interval != intervalAuto)\r\n                        objUpAuto.interval = intervalAuto;\r\n                    if (debug)\r\n                        console.log('updateEpisodeList submit', objUpAuto);\r\n                    objUpAuto.launch();\r\n                    $('#updateEpisodeList .updateElement').popover('hide');\r\n                });\r\n            });\r\n        }, 500);\r\n    }\r\n    /**\r\n     * Ajoute un bouton Vu sur la vignette d'un épisode\r\n     * @param {Show} res L'objet Show de l'API\r\n     */\r\n    function upgradeEpisodes(res) {\r\n        // On vérifie que l'utilisateur est connecté et que la clé d'API est renseignée\r\n        if (!userIdentified() || betaseries_api_user_key === '')\r\n            return;\r\n        const seasons = $('#seasons .slide_flex');\r\n        let vignettes = getVignettes();\r\n        if (debug)\r\n            console.log('Nb seasons: %d, nb vignettes: %d', seasons.length, vignettes.length);\r\n        /*\r\n         * Ajoute une écoute sur l'objet Show, sur l'évenement UPDATE,\r\n         * pour mettre à jour l'update auto des épisodes\r\n         */\r\n        res.addListener(Base_1.EventTypes.UPDATE, function (show) {\r\n            if (debug)\r\n                console.log('Listener called');\r\n            // Si il n'y a plus d'épisodes à regarder sur la série\r\n            if (show.user.remaining <= 0) {\r\n                let objUpAuto = UpdateAuto_1.UpdateAuto.getInstance(show);\r\n                // Si la série est terminée\r\n                if (show.isEnded()) {\r\n                    // On supprime la série des options d'update\r\n                    objUpAuto.delete();\r\n                }\r\n                else {\r\n                    // On désactive la mise à jour auto\r\n                    objUpAuto.stop();\r\n                }\r\n            }\r\n        });\r\n        // On ajoute les cases à cocher sur les vignettes courantes\r\n        addCheckSeen();\r\n        // Ajoute les cases à cocher sur les vignettes des épisodes\r\n        function addCheckSeen() {\r\n            vignettes = getVignettes();\r\n            const seasonNum = parseInt($('#seasons div[role=\"button\"].slide--current .slide__title').text().match(/\\d+/).shift(), 10);\r\n            res.setCurrentSeason(seasonNum);\r\n            let promise = res.currentSeason.fetchEpisodes(); // Contient la promesse de récupérer les épisodes de la saison courante\r\n            // On ajoute le CSS et le Javascript pour les popup\r\n            if ($('#csspopover').length === 0 && $('#jsbootstrap').length === 0) {\r\n                addScriptAndLink(['popover', 'bootstrap']);\r\n            }\r\n            /**\r\n             * Retourne la position de la popup par rapport à l'image du similar\r\n             * @param  {Object} _tip Unknown\r\n             * @param  {Object} elt Le DOM Element du lien du similar\r\n             * @return {String}     La position de la popup\r\n             */\r\n            let funcPlacement = (_tip, elt) => {\r\n                //if (debug) console.log('funcPlacement', tip, $(tip).width());\r\n                let rect = elt.getBoundingClientRect(), width = $(window).width(), sizePopover = 320;\r\n                return ((rect.left + rect.width + sizePopover) > width) ? 'left' : 'right';\r\n            };\r\n            // On ajoute la description des épisodes dans des Popup\r\n            promise.then(() => {\r\n                let intTime = setInterval(function () {\r\n                    if (typeof bootstrap === 'undefined' || typeof bootstrap.Popover !== 'function') {\r\n                        return;\r\n                    }\r\n                    else\r\n                        clearInterval(intTime);\r\n                    if (debug)\r\n                        console.log('Add synopsis episode');\r\n                    let $vignette, objEpisode, description;\r\n                    for (let v = 0; v < vignettes.length; v++) {\r\n                        $vignette = $(vignettes.get(v));\r\n                        objEpisode = res.currentSeason.episodes[v];\r\n                        objEpisode.elt = $vignette.parents('.slide_flex');\r\n                        objEpisode.save();\r\n                        description = objEpisode.description;\r\n                        if (description.length > 350) {\r\n                            description = description.substring(0, 350) + '…';\r\n                        }\r\n                        else if (description.length <= 0) {\r\n                            description = 'Aucune description';\r\n                        }\r\n                        // Ajout de l'attribut title pour obtenir le nom complet de l'épisode, lorsqu'il est tronqué\r\n                        objEpisode.addAttrTitle();\r\n                        objEpisode.initCheckSeen(v);\r\n                        // Ajoute la synopsis de l'épisode au survol de la vignette\r\n                        $vignette.popover({\r\n                            container: $vignette,\r\n                            delay: { \"show\": 500, \"hide\": 100 },\r\n                            html: true,\r\n                            content: `<p>${description}</p>`,\r\n                            placement: funcPlacement,\r\n                            title: ' ',\r\n                            trigger: 'hover',\r\n                            boundary: 'window'\r\n                        });\r\n                    }\r\n                    $('#episodes .slide__image').on('shown.bs.popover', function () {\r\n                        const $checkSeen = $(this).find('.checkSeen'), episodeId = parseInt($checkSeen.data('id'), 10), episode = res.currentSeason.getEpisode(episodeId);\r\n                        if (!episode) {\r\n                            console.warn('episode title popup', episodeId, res);\r\n                        }\r\n                        $('#episodes .slide__image .popover-header').html(episode.getTitlePopup());\r\n                    });\r\n                    // On ajoute un event click sur la case 'checkSeen'\r\n                    $('#episodes .checkSeen').click(function (e) {\r\n                        e.stopPropagation();\r\n                        e.preventDefault();\r\n                        const $elt = $(e.currentTarget), episodeId = parseInt($elt.data('id'), 10), episode = res.currentSeason.getEpisode(episodeId);\r\n                        if (debug)\r\n                            console.log('click checkSeen', episode, res);\r\n                        episode.toggleSpinner(true);\r\n                        // On vérifie si l'épisode a déjà été vu\r\n                        if ($elt.hasClass('seen')) {\r\n                            // On demande à l'enlever des épisodes vus\r\n                            episode.updateStatus('notSeen', Base_1.HTTP_VERBS.DELETE);\r\n                        }\r\n                        // Sinon, on l'ajoute aux épisodes vus\r\n                        else {\r\n                            episode.updateStatus('seen', Base_1.HTTP_VERBS.POST);\r\n                        }\r\n                    });\r\n                    // On ajoute un effet au survol de la case 'checkSeen'\r\n                    $('#episodes .checkSeen').hover(\r\n                    // IN\r\n                    (e) => {\r\n                        $(e.currentTarget)\r\n                            .siblings('.overflowHidden')\r\n                            .find('img.js-lazy-image')\r\n                            .css('transform', 'scale(1.2)');\r\n                        $(e.currentTarget)\r\n                            .parent('.slide__image')\r\n                            .popover('hide');\r\n                    }, \r\n                    // OUT\r\n                    (e) => {\r\n                        $(e.currentTarget)\r\n                            .siblings('.overflowHidden')\r\n                            .find('img.js-lazy-image')\r\n                            .css('transform', 'scale(1.0)');\r\n                        $(e.currentTarget)\r\n                            .parent('.slide__image')\r\n                            .popover('show');\r\n                    });\r\n                }, 500);\r\n            });\r\n            // Ajouter un bouton de mise à jour des épisodes de la saison courante\r\n            if ($('#updateEpisodeList').length < 1) {\r\n                $('#episodes .blockTitles').prepend(`\r\n                    <style>#updateEpisodeList .popover {left: 65px; top: 40px;}</style>\r\n                    <div id=\"updateEpisodeList\" class=\"updateElements\">\r\n                      <i class=\"fa fa-refresh fa-2x updateEpisodes updateElement finish\"\r\n                         title=\"Mise à jour des épisodes de la saison\"\r\n                         style=\"margin-right:10px;\"\r\n                         aria-hidden=\"true\"></i>\r\n                    </div>`);\r\n                // On ajoute l'update auto des épisodes de la saison courante\r\n                updateAutoEpisodeList(res);\r\n                // On ajoute la gestion de l'event click sur le bouton\r\n                $('.updateEpisodes').click((e) => {\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    if (debug)\r\n                        console.groupCollapsed('updateEpisodes');\r\n                    // On ferme la popup des options d'update auto\r\n                    $('#updateEpisodeList .updateElement').popover('hide');\r\n                    const self = $(e.currentTarget);\r\n                    self.removeClass('finish');\r\n                    // Le numéro de la saison courante\r\n                    const seasonNum = $('#seasons .slide_flex.slide--current .slide__title').text().match(/\\d+/).shift();\r\n                    res.currentSeason.fetchEpisodes().then(() => {\r\n                        // if (debug) console.log('after fetchEpisodes', Object.assign({}, objShow));\r\n                        vignettes = getVignettes();\r\n                        // len = getNbVignettes();\r\n                        let $vignette, objEpisode, changed = false, retour;\r\n                        for (let v = 0; v < vignettes.length; v++) {\r\n                            $vignette = $(vignettes.get(v)); // DOMElement jQuery de l'image de l'épisode\r\n                            objEpisode = res.currentSeason.episodes[v];\r\n                            objEpisode.elt = $vignette.parents('.slide_flex'); // Données de l'épisode\r\n                            //if (debug) console.log('Episode ID', getEpisodeId($vignette), episode.id);\r\n                            retour = objEpisode.updateCheckSeen(v);\r\n                            if (!changed) {\r\n                                changed = retour;\r\n                            }\r\n                        }\r\n                        // On met à jour les éléments, seulement si il y a eu des modifications\r\n                        if (changed) {\r\n                            if (debug)\r\n                                console.log('updateEpisodes changed true', res);\r\n                            // Si il reste des épisodes à voir, on scroll\r\n                            if ($('#episodes .slide_flex.slide--notSeen').length > 0) {\r\n                                $('#episodes .slides_flex').get(0).scrollLeft =\r\n                                    $('#episodes .slide_flex.slide--notSeen').get(0).offsetLeft - 69;\r\n                            }\r\n                            res.update(true).then(() => {\r\n                                self.addClass('finish');\r\n                                fnLazy.init(); // On affiche les images lazyload\r\n                                if (debug)\r\n                                    console.groupEnd(); // On clos le groupe de console\r\n                            }, err => {\r\n                                notification('Erreur de récupération de la ressource Show', 'Show update: ' + err);\r\n                                self.addClass('finish');\r\n                                console.warn('Show update error', err);\r\n                                if (debug)\r\n                                    console.groupEnd(); // On clos le groupe de console\r\n                            });\r\n                        }\r\n                        else {\r\n                            if (debug)\r\n                                console.log('updateEpisodes no changes');\r\n                            self.addClass('finish'); // On arrete l'animation de mise à jour\r\n                            if (debug)\r\n                                console.groupEnd(); // On clos le groupe de console\r\n                        }\r\n                    }, (err) => {\r\n                        self.addClass('finish');\r\n                        if (debug)\r\n                            console.groupEnd();\r\n                        notification('Erreur de mise à jour des épisodes', 'updateEpisodeList: ' + err);\r\n                    });\r\n                });\r\n            }\r\n        }\r\n        // On ajoute un event sur le changement de saison\r\n        seasons.click(() => {\r\n            if (debug)\r\n                console.groupCollapsed('season click');\r\n            $('#episodes .checkSeen').off('click');\r\n            // On attend que les vignettes de la saison choisie soient chargées\r\n            waitSeasonsAndEpisodesLoaded(() => {\r\n                addCheckSeen();\r\n                if (debug)\r\n                    console.groupEnd();\r\n            }, () => {\r\n                console.error('Season click Timeout');\r\n                if (debug)\r\n                    console.groupEnd();\r\n            });\r\n        });\r\n        // On active les menus dropdown\r\n        $('.dropdown-toggle').dropdown();\r\n        // On gère l'ajout et la suppression de la série dans le compte utilisateur\r\n        if (res.in_account) {\r\n            res.deleteShowClick();\r\n        }\r\n        else {\r\n            res.addShowClick();\r\n        }\r\n        // On récupère les vignettes des épisodes\r\n        function getVignettes() {\r\n            return $('#episodes .slide__image');\r\n        }\r\n    }\r\n    /**\r\n     * Modifie le fonctionnement d'ajout d'un similar\r\n     *\r\n     * @param  {Object}   $elt          L'élément DOMElement jQuery\r\n     * @param  {Number[]} [objSimilars] Un tableau des identifiants des similars actuels\r\n     * @return {void}\r\n     */\r\n    function replaceSuggestSimilarHandler($elt, objSimilars = []) {\r\n        // On vérifie que l'utilisateur est connecté et que la clé d'API est renseignée\r\n        if (!userIdentified() || betaseries_api_user_key === '' || !/(serie|film)/.test(url))\r\n            return;\r\n        if (debug)\r\n            console.log('replaceSuggestSimilarHandler');\r\n        const type = getApiResource(url.split('/')[1]), // Le type de ressource\r\n        resId = getResourceId(); // Identifiant de la ressource\r\n        // Gestion d'ajout d'un similar\r\n        $elt.removeAttr('onclick').click(() => {\r\n            new PopupAlert({\r\n                showClose: true,\r\n                type: 'popin-suggestshow',\r\n                params: {\r\n                    id: resId\r\n                },\r\n                callback: function () {\r\n                    $(\"#similaire_id_search\").focus().on(\"keyup\", (e) => {\r\n                        let search = $(e.currentTarget).val().toString();\r\n                        if (search.length > 0 && e.which != 40 && e.which != 38) {\r\n                            Base_1.Base.callApi('GET', 'search', type.plural, { autres: 'mine', text: search })\r\n                                .then((data) => {\r\n                                const medias = data[type.plural];\r\n                                $(\"#search_results .title\").remove();\r\n                                $(\"#search_results .item\").remove();\r\n                                let media;\r\n                                for (let s = 0; s < medias.length; s++) {\r\n                                    media = medias[s];\r\n                                    if (objSimilars.indexOf(media.id) !== -1) {\r\n                                        continue;\r\n                                    } // Similar déjà proposé\r\n                                    $('#search_results').append(`\r\n                                        <div class=\"item\">\r\n                                          <p><span data-id=\"${media.id}\" style=\"cursor:pointer;\">${media.title}</span></p>\r\n                                        </div>`);\r\n                                }\r\n                                $('#search_results .item span').click((e) => {\r\n                                    autocompleteSimilar(e.currentTarget);\r\n                                });\r\n                            }, (err) => {\r\n                                notification('Ajout d\\'un similar', 'Erreur requête Search: ' + err);\r\n                            });\r\n                        }\r\n                        else if (e.which != 40 && e.which != 38) {\r\n                            $(\"#search_results\").empty();\r\n                            $(\"#similaire_id_search\").off(\"keydown\");\r\n                        }\r\n                    });\r\n                    $(\"#similaire_id_search\").off('keydown').on('keydown', (e) => {\r\n                        const current_item = $(\"#search_results .item.hl\");\r\n                        switch (e.which) {\r\n                            /* Flèche du bas */\r\n                            case 40:\r\n                                if (current_item.length === 0) {\r\n                                    $(\"#search_results .item:first\").addClass(\"hl\");\r\n                                }\r\n                                else {\r\n                                    let next_item = $(\"#search_results .item.hl\").next(\"div\");\r\n                                    if (next_item.attr(\"class\") === \"title\") {\r\n                                        next_item = next_item.next(\"div\");\r\n                                    }\r\n                                    current_item.removeClass(\"hl\");\r\n                                    next_item.addClass(\"hl\");\r\n                                }\r\n                                break;\r\n                            /* Flèche du haut */\r\n                            case 38:\r\n                                if (current_item.length !== 0) {\r\n                                    let prev_item = $(\"#search_results .item.hl\").prev(\"div\");\r\n                                    if (prev_item.attr(\"class\") == \"title\") {\r\n                                        prev_item = prev_item.prev(\"div\");\r\n                                    }\r\n                                    current_item.removeClass(\"hl\");\r\n                                    prev_item.addClass(\"hl\");\r\n                                }\r\n                                break;\r\n                            /* Touche Entrée */\r\n                            case 13:\r\n                                if (debug)\r\n                                    console.log('current_item', current_item);\r\n                                if (current_item.length !== 0) {\r\n                                    autocompleteSimilar(current_item.find(\"span\"));\r\n                                }\r\n                                break;\r\n                            /* Touche Echap */\r\n                            case 27:\r\n                                $(\"#search_results\").empty();\r\n                                $(\"input[name=similaire_id_search]\").val(\"\").trigger(\"blur\");\r\n                                break;\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            function autocompleteSimilar(el) {\r\n                let titre = $(el).html(), id = $(el).data(\"id\");\r\n                titre = titre.replace(/&amp;/g, \"&\");\r\n                $(\"#search_results .item\").remove();\r\n                $(\"#search_results .title\").remove();\r\n                $(\"#similaire_id_search\").val(titre).trigger(\"blur\");\r\n                $(\"input[name=similaire_id]\").val(id);\r\n                $('#popin-dialog .popin-content-html > form > div.button-set > button').focus();\r\n                //$(\"input[name=notes_url]\").trigger(\"focus\");\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Vérifie si les séries/films similaires ont été vues\r\n     * Nécessite que l'utilisateur soit connecté et que la clé d'API soit renseignée\r\n     * @param {Media} res La ressource de l'API\r\n     */\r\n    function similarsViewed(res) {\r\n        // On vérifie que l'utilisateur est connecté et que la clé d'API est renseignée\r\n        if (!userIdentified() || betaseries_api_user_key === '' || !/(serie|film)/.test(url))\r\n            return;\r\n        console.groupCollapsed('similarsViewed');\r\n        let $similars = $('#similars .slide__title'), // Les titres des ressources similaires\r\n        len = $similars.length; // Le nombre de similaires\r\n        if (debug)\r\n            console.log('nb similars: %d', len, res.nbSimilars);\r\n        // On sort si il n'y a aucun similars ou si il s'agit de la vignette d'ajout\r\n        if (len <= 0 || (len === 1 && $($similars.parent().get(0)).find('button').length === 1)) {\r\n            $('.updateSimilars').addClass('finish');\r\n            replaceSuggestSimilarHandler($('#similars div.slides_flex div.slide_flex div.slide__image > button'));\r\n            console.groupEnd();\r\n            return;\r\n        }\r\n        /*\r\n         * On ajoute un bouton de mise à jour des similars\r\n         * et on vérifie qu'il n'existe pas déjà\r\n         */\r\n        if ($('#updateSimilarsBlock').length < 1) {\r\n            // On ajoute les ressources CSS et JS nécessaires\r\n            if ($('#csspopover').length <= 0 && $('#jsbootstrap').length <= 0) {\r\n                addScriptAndLink(['popover', 'bootstrap']);\r\n            }\r\n            // On ajoute le bouton de mise à jour des similaires\r\n            $('#similars .blockTitles').append(`\r\n                <div id=\"updateSimilarsBlock\" class=\"updateElements\" style=\"margin-left:10px;\">\r\n                  <img src=\"${serverBaseUrl}/img/update.png\"\r\n                       class=\"updateSimilars updateElement\"\r\n                       title=\"Mise à jour des similaires vus\"/>\r\n                </div>`);\r\n            // Si le bouton d'ajout de similaire n'est pas présent\r\n            // et que la ressource est dans le compte de l'utilisateur, on ajoute le bouton\r\n            if ($('#similars button.blockTitle-subtitle').length === 0 && res.in_account === true) {\r\n                $('#similars .blockTitle')\r\n                    .after(`<button type=\"button\"\r\n                                    class=\"btn-reset blockTitle-subtitle u-colorWhiteOpacity05\">\r\n                                        Suggérer une série\r\n                            </button>`);\r\n            }\r\n            // On ajoute la gestion de l'event click sur le bouton d'update des similars\r\n            $('.updateSimilars').click(function (e) {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                $(this).removeClass('finish');\r\n                // On supprime les bandeaux Viewed\r\n                $('.bandViewed').remove();\r\n                // On supprime les notes\r\n                $('.stars-outer').remove();\r\n                $('.fa-wrench').off('click').remove();\r\n                // On supprime les popovers\r\n                $('#similars a.slide__image').each((i, elt) => {\r\n                    $(elt).popover('dispose');\r\n                });\r\n                // On met à jour les series/films similaires\r\n                similarsViewed(res);\r\n            });\r\n        }\r\n        let objSimilars = [];\r\n        res.fetchSimilars().then(function (res) {\r\n            let intTime = setInterval(function () {\r\n                if (typeof bootstrap === 'undefined' || typeof bootstrap.Popover !== 'function') {\r\n                    return;\r\n                }\r\n                else\r\n                    clearInterval(intTime);\r\n                /**\r\n                 * Retourne la position de la popup par rapport à l'image du similar\r\n                 * @param  {Object}         _tip Unknown\r\n                 * @param  {HTMLElement}    elt  Le DOM Element du lien du similar\r\n                 * @return {String}              La position de la popup\r\n                 */\r\n                let funcPlacement = (_tip, elt) => {\r\n                    //if (debug) console.log('funcPlacement', tip, $(tip).width());\r\n                    let rect = elt.getBoundingClientRect(), width = $(window).width(), sizePopover = 320;\r\n                    return ((rect.left + rect.width + sizePopover) > width) ? 'left' : 'right';\r\n                };\r\n                for (let s = 0; s < res.similars.length; s++) {\r\n                    objSimilars.push(res.similars[s].id);\r\n                    let $elt = $($similars.get(s)), $link = $elt.siblings('a'), similar = res.similars[s];\r\n                    similar.elt = $elt.parents('.slide_flex');\r\n                    similar.save();\r\n                    // similar = new Similar(resource, $elt.parents('.slide_flex'), type);\r\n                    // On décode le titre du similar\r\n                    similar.decodeTitle();\r\n                    // On ajoute l'icone pour visualiser les data JSON du similar\r\n                    if (debug) {\r\n                        similar.wrench();\r\n                    }\r\n                    similar\r\n                        // On vérifie la présence de l'image du similar\r\n                        .checkImg()\r\n                        // On ajoute le bandeau viewed sur le similar\r\n                        .addViewed()\r\n                        // On ajoute le code HTML pour le rendu de la note\r\n                        .renderStars();\r\n                    // On ajoute la popover sur le similar\r\n                    $link.popover({\r\n                        container: $link,\r\n                        delay: { \"show\": 250, \"hide\": 100 },\r\n                        html: true,\r\n                        content: ' ',\r\n                        placement: funcPlacement,\r\n                        title: ' ',\r\n                        trigger: 'hover',\r\n                        fallbackPlacement: ['left', 'right']\r\n                    });\r\n                }\r\n                // Event à l'ouverture de la Popover\r\n                $('#similars a.slide__image').on('shown.bs.popover', function () {\r\n                    const $wrench = $(this).parent().find('.popover-wrench'), resId = parseInt($wrench.data('id'), 10), type = $wrench.data('type'), objSimilar = res.getSimilar(resId);\r\n                    $('.popover-header').html(objSimilar.getTitlePopup());\r\n                    $('.popover-body').html(objSimilar.getContentPopup());\r\n                    // On gère les modifs sur les cases à cocher de l'état d'un film similar\r\n                    if (type === Base_1.MediaType.movie) {\r\n                        $('input.movie').change((e) => {\r\n                            e.stopPropagation();\r\n                            e.preventDefault();\r\n                            const $elt = $(e.currentTarget);\r\n                            let state = 0;\r\n                            if (debug)\r\n                                console.log('input.movie change', $elt);\r\n                            if ($elt.is(':checked') && $elt.hasClass('movieSeen')) {\r\n                                state = 1;\r\n                            }\r\n                            else if (($elt.is(':checked') && $elt.hasClass('movieMustSee')) ||\r\n                                (!$elt.is(':checked') && $elt.hasClass('movieSeen'))) {\r\n                                state = 0;\r\n                            }\r\n                            else if ($elt.is(':checked') && $elt.hasClass('movieNotSee')) {\r\n                                state = 2;\r\n                            }\r\n                            $('input.movie:not(.' + $elt.get(0).classList[1] + ')').each((i, e) => {\r\n                                $(e).prop(\"checked\", false);\r\n                            });\r\n                            objSimilar.addToAccount(state).then(similar => {\r\n                                if (state === 1) {\r\n                                    $elt.parents('a').prepend(`<img src=\"${serverBaseUrl}/img/viewed.png\" class=\"bandViewed\"/>`);\r\n                                }\r\n                                else if ($elt.parents('a').find('.bandViewed').length > 0) {\r\n                                    $elt.parents('a').find('.bandViewed').remove();\r\n                                }\r\n                                if (debug)\r\n                                    console.log('movie mustSee/seen OK', similar);\r\n                            }, err => {\r\n                                console.warn('movie mustSee/seen KO', err);\r\n                            });\r\n                        });\r\n                    }\r\n                    // On gère le click sur le lien d'ajout de la série similar sur le compte de l'utilisateur\r\n                    else if (type === Base_1.MediaType.show) {\r\n                        $('.popover .addShow').click((e) => {\r\n                            e.stopPropagation();\r\n                            e.preventDefault();\r\n                            objSimilar.addToAccount().then(() => {\r\n                                const para = $(e.currentTarget).parent('p');\r\n                                $(e.currentTarget).remove();\r\n                                para.text('<span style=\"color:var(--link-color)\">La série a bien été ajoutée à votre compte</span>').delay(2000).fadeIn(400);\r\n                            }, err => {\r\n                                console.error('Popover addShow error', err);\r\n                            });\r\n                        });\r\n                    }\r\n                    // On gère le placement de la Popover par rapport à l'image du similar\r\n                    let popover = $('.popover'), img = popover.siblings('img.js-lazy-image'), placement = $('.popover').attr('x-placement'), space = 0;\r\n                    if (placement == 'left') {\r\n                        space = popover.width() + (img.width() / 2) + 5;\r\n                        popover.css('left', `-${space}px`);\r\n                    }\r\n                });\r\n                $('.updateSimilars').addClass('finish');\r\n                console.groupEnd();\r\n            }, 500);\r\n        }, (err) => {\r\n            notification('Erreur de récupération des similars', 'similarsViewed: ' + err);\r\n        });\r\n        replaceSuggestSimilarHandler($('#similars button.blockTitle-subtitle'), objSimilars);\r\n    }\r\n    /**\r\n     * Permet de mettre à jour la liste des épisodes à voir\r\n     * sur la page de l'agenda\r\n     * @return {void}\r\n     */\r\n    function updateAgenda() {\r\n        // Identifier les informations des épisodes à voir\r\n        // Les containers\r\n        let $containersEpisode = $('#reactjs-episodes-to-watch .ComponentEpisodeContainer'), len = $containersEpisode.length, currentShowIds = {};\r\n        // En attente du chargement des épisodes\r\n        if (len > 0) {\r\n            if (debug)\r\n                console.log('updateAgenda - nb containers: %d', len);\r\n            clearInterval(timerUA);\r\n        }\r\n        else {\r\n            if (debug)\r\n                console.log('updateAgenda en attente');\r\n            return;\r\n        }\r\n        const params = {\r\n            limit: 1,\r\n            order: 'smart',\r\n            showsLimit: len,\r\n            released: 1,\r\n            specials: false,\r\n            subtitles: 'all'\r\n        };\r\n        Base_1.Base.callApi('GET', 'episodes', 'list', params)\r\n            .then((data) => {\r\n            for (let t = 0; t < len; t++) {\r\n                $($containersEpisode.get(t))\r\n                    .data('showId', data.shows[t].id)\r\n                    .data('code', data.shows[t].unseen[0].code.toLowerCase());\r\n                currentShowIds[data.shows[t].id] = { code: data.shows[t].unseen[0].code.toLowerCase() };\r\n                //if (debug) console.log('title: %s - code: %s', title, episode);\r\n            }\r\n        });\r\n        if ($('.updateElements').length === 0) {\r\n            // On ajoute le bouton de mise à jour des similaires\r\n            $('.maintitle > div:nth-child(1)').after(`\r\n                <div class=\"updateElements\">\r\n                  <img src=\"${serverBaseUrl}/img/update.png\" width=\"20\" class=\"updateEpisodes updateElement finish\" title=\"Mise à jour des similaires vus\"/>\r\n                </div>\r\n            `);\r\n            addScriptAndLink('moment');\r\n            setTimeout(() => {\r\n                addScriptAndLink('localefr');\r\n            }, 250);\r\n            $('.updateEpisodes').click((e) => {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                if (debug)\r\n                    console.groupCollapsed('Agenda updateEpisodes');\r\n                $containersEpisode = $('#reactjs-episodes-to-watch .ComponentEpisodeContainer');\r\n                const self = $(e.currentTarget), len = $containersEpisode.length;\r\n                self.removeClass('finish');\r\n                let countIntTime = 0;\r\n                Media_1.Media.callApi('GET', 'episodes', 'list', { limit: 1, order: 'smart', showsLimit: len, released: 1, specials: false, subtitles: 'all' })\r\n                    .then((data) => {\r\n                    let intTime = setInterval(function () {\r\n                        if (++countIntTime > 60) {\r\n                            clearInterval(intTime);\r\n                            self.addClass('finish');\r\n                            notification('Erreur de mise à jour des épisodes', 'updateAgenda: updateEpisodes.click interval time over');\r\n                            if (debug)\r\n                                console.groupEnd();\r\n                            return;\r\n                        }\r\n                        if (typeof moment !== 'function') {\r\n                            return;\r\n                        }\r\n                        else\r\n                            clearInterval(intTime);\r\n                        moment.locale('fr');\r\n                        let newShowIds = {}, show;\r\n                        if (debug)\r\n                            console.log('updateAgenda updateEpisodes', data);\r\n                        for (let s = 0; s < data.shows.length; s++) {\r\n                            show = data.shows[s];\r\n                            newShowIds[show.id] = { code: show.unseen[0].code.toLowerCase() };\r\n                            if (currentShowIds[show.id] === undefined) {\r\n                                if (debug)\r\n                                    console.log('Une nouvelle série est arrivée', show);\r\n                                // Il s'agit d'une nouvelle série\r\n                                // TODO Ajouter un nouveau container\r\n                                let newContainer = $(buildContainer(show.unseen[0]));\r\n                                renderNote(show.unseen[0].note.mean, newContainer);\r\n                                $($containersEpisode.get(s)).parent().after(newContainer);\r\n                            }\r\n                        }\r\n                        if (debug)\r\n                            console.log('Iteration principale');\r\n                        let container, unseen;\r\n                        // Itération principale sur les containers\r\n                        for (let e = 0; e < len; e++) {\r\n                            container = $($containersEpisode.get(e));\r\n                            unseen = null;\r\n                            // Si la serie n'est plus dans la liste\r\n                            if (newShowIds[container.data('showId')] === undefined) {\r\n                                if (debug)\r\n                                    console.log('La série %d ne fait plus partie de la liste', container.data('showId'));\r\n                                container.parent().remove();\r\n                                continue;\r\n                            }\r\n                            if (container.data('showId') == data.shows[e].id) {\r\n                                unseen = data.shows[e].unseen[0];\r\n                            }\r\n                            else {\r\n                                for (let u = 0; u < len; u++) {\r\n                                    if (container.data('showId') == data.shows[u].id) {\r\n                                        unseen = data.shows[u].unseen[0];\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (unseen && container.data('code') !== unseen.code.toLowerCase()) {\r\n                                if (debug)\r\n                                    console.log('Episode à mettre à jour', unseen);\r\n                                // Mettre à jour l'épisode\r\n                                let mainLink = $('a.mainLink', container), text = unseen.code + ' - ' + unseen.title;\r\n                                // On met à jour le titre et le lien de l'épisode\r\n                                mainLink.attr('href', mainLink.attr('href').replace(/s\\d{2}e\\d{2}/, unseen.code.toLowerCase()));\r\n                                mainLink.attr('title', `Accéder à la fiche de l'épisode ${text}`);\r\n                                mainLink.text(text);\r\n                                // On met à jour la date de sortie\r\n                                $('.date .mainTime', container).text(moment(unseen.date).format('D MMMM YYYY'));\r\n                                // On met à jour la synopsis\r\n                                $('.m_s p.m_ay', container).html(unseen.description);\r\n                                // On met à jour la barre de progression\r\n                                $('.media-left > .m_ab > .m_ag', container).css('width', String(unseen.show.progress) + '%');\r\n                                // On met à jour la note\r\n                                renderNote(unseen.note.mean, container);\r\n                            }\r\n                            else {\r\n                                console.log('Episode Show unchanged', unseen);\r\n                            }\r\n                        }\r\n                        fnLazy.init();\r\n                        self.addClass('finish');\r\n                        if (debug)\r\n                            console.groupEnd();\r\n                    }, 500);\r\n                }, (err) => {\r\n                    notification('Erreur de mise à jour des épisodes', 'updateAgenda: ' + err);\r\n                    if (debug)\r\n                        console.groupEnd();\r\n                });\r\n            });\r\n        }\r\n        /**\r\n         * Permet d'afficher une note avec des étoiles\r\n         * @param  {Number} note      La note à afficher\r\n         * @param  {Object} container DOMElement contenant la note à afficher\r\n         * @return {void}\r\n         */\r\n        function renderNote(note, container) {\r\n            const renderStars = $('.date .stars', container);\r\n            if (renderStars.length <= 0) {\r\n                return;\r\n            }\r\n            renderStars.empty();\r\n            renderStars.attr('title', `${parseFloat(note).toFixed(1)} / 5`);\r\n            let typeSvg;\r\n            Array.from({\r\n                length: 5\r\n            }, (index, number) => {\r\n                typeSvg = note <= number ? \"empty\" : (note < number + 1) ? 'half' : \"full\";\r\n                renderStars.append(`\r\n                    <svg viewBox=\"0 0 100 100\" class=\"star-svg\">\r\n                      <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n                           xlink:href=\"#icon-star-${typeSvg}\">\r\n                      </use>\r\n                    </svg>\r\n                `);\r\n            });\r\n        }\r\n        /**\r\n         * Permet de construire le container d'un episode\r\n         * @param  {Object} unseen Correspond à l'objet Episode non vu\r\n         * @return {String}\r\n         */\r\n        function buildContainer(unseen) {\r\n            let description = unseen.description;\r\n            if (description.length <= 0) {\r\n                description = 'Aucune description';\r\n            }\r\n            else if (description.length > 145) {\r\n                description = description.substring(0, 145) + '…';\r\n            }\r\n            const urlShow = unseen.resource_url.replace('episode', 'serie').replace(/\\/s\\d{2}e\\d{2}$/, '');\r\n            let template = `\r\n            <div class=\"a6_ba displayFlex justifyContentSpaceBetween\" style=\"opacity: 1; transition: opacity 300ms ease-out 0s, transform;\">\r\n              <div class=\"a6_a8 ComponentEpisodeContainer media\">\r\n                <div class=\"media-left\">\r\n                  <img class=\"js-lazy-image greyBorder a6_a2\" data-src=\"https://api.betaseries.com/pictures/shows?key=${betaseries_api_user_key}&id=${unseen.show.id}&width=119&height=174\" width=\"119\" height=\"174\" alt=\"Affiche de la série ${unseen.show.title}\">\r\n                </div>\r\n                <div class=\"a6_bc media-body alignSelfStretch displayFlex flexDirectionColumn\">\r\n                  <div class=\"media\">\r\n                    <div class=\"media-body minWidth0 alignSelfStretch displayFlex flexDirectionColumn alignItemsFlexStart\">\r\n                      <a class=\"a6_bp displayBlock nd\" href=\"${urlShow}\" title=\"${trans(\"agenda.episodes_watch.show_link_title\", { title: unseen.show.title })}\">\r\n                        <strong>${unseen.show.title}</strong>\r\n                      </a>\r\n                      <a class=\"a6_bp a6_ak mainLink displayBlock nd\" href=\"${unseen.resource_url}\" title=\"${trans(\"agenda.episodes_watch.episode_link_title\", { code: unseen.code.toUpperCase(), title: unseen.title })}\">${unseen.code.toUpperCase()} - ${unseen.title}</a>\r\n                      <div class=\"date displayFlex a6_bv\">\r\n                        <time class=\"mainTime\">${moment(unseen.date).format('D MMMM YYYY')}</time>\r\n                        <span class=\"stars\" title=\"\"></span>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"a6_bh media-right\" data-tour=\"step: 6; title: ${trans(\"tourguide.series-agenda.6.title\")}; content: ${trans(\"tourguide.series-agenda.6.content\")};\">\r\n                      <div class=\"displayFlex alignItemsCenter\">\r\n                        <button type=\"button\" class=\"btn-reset alignSelfCenter ij_il ij_in\"></button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <p class=\"a6_bt\" style=\"margin: 11px 0px 10px;\">${description}</p>\r\n                  <div class=\"media\">\r\n                    <div class=\"media-left alignSelfCenter\">\r\n                      <div class=\"a6_bj\">\r\n                        <div class=\"a6_bn\" style=\"width: ${unseen.show.progress}%;\"></div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"media-body alignSelfCenter displayFlex flexDirectionColumn alignItemsFlexStart\">\r\n                      <span class=\"a6_bl\">${secondsToDhms(unseen.show.minutes_remaining * 60)} (${unseen.show.remaining} ép.)</span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"media\" style=\"margin-top: 9px;\">\r\n                    <div class=\"media-body alignSelfCenter\">\r\n                      <div class=\"listAvatars listAvatars--small marginTopAuto\">${watchedAvatar(unseen.watched_by)}</div>\r\n                    </div>\r\n                    <div class=\"a6_aq media-right alignSelfCenter positionRelative\" data-tour=\"step: 5; title: Masquer un épisode; content: Si vous le souhaitez, choisissez de masquer cet épisode de votre liste d’épisodes à regarder ou retrouvez-en les sous-titres.;\">\r\n                      <div class=\"displayFlex\">`;\r\n            if (unseen.subtitles.length > 0) {\r\n                template += `\r\n                        <div class=\"svgContainer a6_0\">\r\n                          <svg class=\"SvgSubtitles\" width=\"20\" height=\"16\" viewBox=\"0 0 20 16\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <g fill=\"none\">\r\n                              <path d=\"M2.083.751c2.389-.501 5.028-.751 7.917-.751 2.939 0 5.619.259 8.04.778.75.161 1.342.736 1.524 1.481.29 1.188.435 3.102.435 5.742s-.145 4.554-.435 5.742c-.182.745-.774 1.32-1.524 1.481-2.421.518-5.101.778-8.04.778-2.89 0-5.529-.25-7.917-.751-.734-.154-1.321-.706-1.519-1.43-.376-1.375-.564-3.315-.564-5.819s.188-4.443.564-5.819c.198-.724.784-1.276 1.519-1.43z\"></path>\r\n                              <path class=\"SvgSubtitles__stroke\" stroke=\"#C1E1FA\" d=\"M2.237 1.485c-.459.096-.825.441-.949.894-.356 1.3-.538 3.178-.538 5.621 0 2.443.182 4.321.538 5.621.124.452.49.797.949.894 2.336.49 4.923.735 7.763.735 2.889 0 5.516-.254 7.883-.761.469-.1.839-.46.953-.926.273-1.116.414-2.979.414-5.564 0-2.584-.141-4.447-.414-5.563-.114-.466-.484-.825-.953-.926-2.367-.507-4.995-.761-7.883-.761-2.84 0-5.428.246-7.763.735z\"></path>\r\n                              <path class=\"SvgSubtitles__fill\" fill=\"#C1E1FA\" d=\"M4 7h12v2h-12zm2 3h8v2h-8z\"></path>\r\n                            </g>\r\n                          </svg>\r\n                        </div>`;\r\n            }\r\n            template += `\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"media-right alignSelfCenter positionRelative\" style=\"min-height: 24px;\">\r\n                      <div class=\"positionRelative\">\r\n                        <div class=\"btn-group\">\r\n                          <button id=\"dropdownSubtitle-8899\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" type=\"button\" class=\"a6_as btn-reset dropdown-toggle -toggle btn btn-default\">\r\n                            <span class=\"svgContainer\">\r\n                              <svg fill=\"#999\" width=\"4\" height=\"16\" viewBox=\"0 0 4 16\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                <path d=\"M2 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\" fill-rule=\"nonzero\" fill=\"inherit\"></path>\r\n                              </svg>\r\n                            </span>\r\n                            <span class=\"caret\"></span>\r\n                          </button>\r\n                          <ul role=\"menu\" class=\"-menu\" aria-labelledby=\"dropdownSubtitle-8899\"></ul>\r\n                        </div>\r\n                        <div class=\"dropdown-menu dropdown-menu--topRight ho_hy\" aria-labelledby=\"dropdownSubtitle-8899\" style=\"top: 0px;\">\r\n                          <div class=\"sousTitres\">\r\n                            <div class=\"ho_hu\">\r\n                              <button type=\"button\" class=\"ho_g btn-reset btn-btn btn--grey\">Ne pas regarder cet épisode</button>\r\n                              <button type=\"button\" class=\"ho_g btn-reset btn-btn btn-blue2\">J'ai récupéré cet épisode</button>\r\n                            </div>\r\n                            ${renderSubtitles(unseen)}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            `;\r\n            return template;\r\n            function watchedAvatar(friends) {\r\n                let template = '', friend;\r\n                for (let f = 0; f < friends.length; f++) {\r\n                    friend = friends[f];\r\n                    template += `\r\n                        <a href=\"/membre/${friend.login}\" class=\"listAvatar\">\r\n                          <img class=\"js-lazy-image\" data-src=\"https://api.betaseries.com/pictures/members?key=${betaseries_api_user_key}&id=${friend.id}&width=24&height=24&placeholder=png\" width=\"24\" height=\"24\" alt=\"Avatar de ${friend.login}\">\r\n                        </a>`;\r\n                }\r\n                return template;\r\n            }\r\n            function secondsToDhms(seconds) {\r\n                seconds = Number(seconds);\r\n                const d = Math.floor(seconds / (3600 * 24)), h = Math.floor(seconds % (3600 * 24) / 3600), m = Math.floor(seconds % 3600 / 60);\r\n                //s = Math.floor(seconds % 60);\r\n                let dDisplay = d > 0 ? d + ' j ' : '', hDisplay = h > 0 ? h + ' h ' : '', mDisplay = m >= 0 && d <= 0 ? m + ' min' : '';\r\n                //sDisplay = s > 0 ? s + (s == 1 ? \" second\" : \" seconds\") : \"\";\r\n                return dDisplay + hDisplay + mDisplay;\r\n            }\r\n            function renderSubtitles(unseen) {\r\n                if (unseen.subtitles.length <= 0)\r\n                    return '';\r\n                let template = `\r\n                <div>\r\n                  <div class=\"ho_gh ComponentTitleDropdown\">Sous-titres de l'épisode</div>\r\n                  <div style=\"display: grid; row-gap: 5px;\">\r\n                    <div class=\"maxHeight280px overflowYScroll\">\r\n                      <div>`;\r\n                for (let st = 0; st < unseen.subtitles.length; st++) {\r\n                    let subtitle = unseen.subtitles[st];\r\n                    if (st > 0)\r\n                        template += '<div style=\"margin-top: 5px;\">';\r\n                    template += `\r\n                        <div style=\"align-items: center; display: flex; justify-content: flex-start;\">\r\n                          <div class=\"svgContainer\">\r\n                            <svg class=\"SvgPertinence\" fill=\"#EEE\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                              <rect fill=\"${subtitle.quality >= 1 ? '#999' : 'inherit'}\" x=\"0\" y=\"10\" width=\"4\" height=\"6\"></rect>\r\n                              <rect fill=\"${subtitle.quality >= 3 ? '#999' : 'inherit'}\" x=\"6\" y=\"5\" width=\"4\" height=\"11\"></rect>\r\n                              <rect fill=\"${subtitle.quality >= 5 ? '#999' : 'inherit'}\" x=\"12\" y=\"0\" width=\"4\" height=\"16\"></rect>\r\n                            </svg>\r\n                          </div>\r\n                          <div class=\"ComponentLang\" style=\"border: 1px solid currentcolor; border-radius: 4px; color: rgb(51, 51, 51); flex-shrink: 0; font-size: 10px; font-weight: 700; height: 18px; line-height: 17px; margin: 0px 10px 0px 5px; min-width: 22px; padding: 0px 3px; text-align: center;\">${subtitle.language}</div>\r\n                          <div class=\"minWidth0\" style=\"flex-grow: 1;\">\r\n                            <a href=\"${subtitle.url}\" class=\"displayBlock mainLink nd\" title=\"Provenance : ${subtitle.source} / ${subtitle.file} / Ajouté le ${moment(subtitle.date).format('DD/MM/YYYY')}\" style=\"max-width: 365px; margin: 0px; font-size: 12px;\">\r\n                              ${ellipsisSubtitles(subtitle)}\r\n                            </a>\r\n                          </div>\r\n                          <button title=\"Signaler ce sous-titre\" type=\"button\" class=\"btn-reset\" onclick=\"srtInaccurate(${subtitle.id});\">\r\n                            <span class=\"svgContainer\">\r\n                              <svg fill=\"#eee\" width=\"22\" height=\"19\" viewBox=\"0 0 22 19\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                <path d=\"M0 19h22l-11-19-11 19zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z\" fill-rule=\"nonzero\" fill=\"inherit\"></path>\r\n                              </svg>\r\n                            </span>\r\n                          </button>\r\n                        </div>\r\n                        `;\r\n                }\r\n                template += `\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                `;\r\n                function ellipsisSubtitles(subtitle) {\r\n                    let subtitleName = subtitle.file, LIMIT_ELLIPSIS = 50;\r\n                    if (subtitleName.length <= LIMIT_ELLIPSIS) {\r\n                        return `<div class=\"nd displayInlineBlock\">${subtitleName}</div>`;\r\n                    }\r\n                    let LENGTH_LAST_ELLIPSIS = 45;\r\n                    return `\r\n                      <div>\r\n                        <div class=\"nd displayInlineBlock\" style=\"max-width: 40px;\">${subtitleName}</div>\r\n                        <div class=\"nd displayInlineBlock\">${subtitleName.slice(-LENGTH_LAST_ELLIPSIS)}</div>\r\n                      </div>\r\n                    `;\r\n                }\r\n                return template;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Ajoute le statut de la série sur la page de gestion des séries de l'utilisateur\r\n     */\r\n    function addStatusToGestionSeries() {\r\n        // On vérifie que l'utilisateur est connecté et que la clé d'API est renseignée\r\n        if (!userIdentified() || betaseries_api_user_key === '')\r\n            return;\r\n        const $series = $('#member_shows div.showItem.cf');\r\n        if ($series.length <= 0)\r\n            return;\r\n        $series.each(function (_index, serie) {\r\n            let id = parseInt($(serie).data('id'), 10), infos = $(serie).find('.infos');\r\n            Show_1.Show.fetch(id).then(function (show) {\r\n                infos.append(`<br>Statut: ${(show.isEnded()) ? 'Terminée' : 'En cours'}`);\r\n            }, (err) => {\r\n                notification('Erreur de modification d\\'une série', 'addStatusToGestionSeries: ' + err);\r\n            });\r\n        });\r\n    }\r\n})(jQuery);\r\n\n\n//# sourceURL=webpack:///./src/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;